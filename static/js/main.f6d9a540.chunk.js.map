{"version":3,"sources":["redux/reducers/patient.js","Services/fetchService.js","Services/patientService.js","redux/thunks/patient.js","components/NewPatientFormModal/NewPatientFormModal.js","redux/reducers/patients.js","components/PatientsList/PatientsList.js","redux/thunks/patients.js","redux/reducers/associations.js","Services/associationService.js","redux/thunks/associations.js","components/AssociationForm/AssociationForm.js","redux/reducers/history.js","Services/draftService.js","components/PatientInfo/PatientInfo.js","redux/thunks/history.js","components/Sidebar/Sidebar.js","components/Patient/Patient.js","components/Associations/Associations.js","components/CurrentState/CurrentState.js","redux/reducers/draft.js","redux/thunks/draft.js","redux/reducers/diseases.js","components/NextState/NextState.js","redux/reducers/disease.js","redux/thunks/disease.js","redux/reducers/nextStates.js","redux/thunks/nextStates.js","redux/reducers/medicines.js","redux/reducers/graph.js","components/Graph/Graph.js","components/NewStatusForm/NewStatusForm.js","redux/reducers/index.js","redux/index.js","components/StatusDraft/StatusDraft.js","components/States/States.js","redux/thunks/diseases.js","redux/thunks/medicines.js","redux/thunks/graph.js","constants.js","components/Header/Header.js","index.js","App.js"],"names":["put","patient","type","payload","baseUrl","get","url","fetch","mode","headers","Content-Type","Access-Control-Allow-Origin","then","response","status","json","Promise","reject","statusText","post","data","params","method","body","JSON","stringify","getPatientById","id","concat","createPatient","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","wrap","_context","prev","next","service","sent","console","log","actionCreators","stop","_x","apply","this","arguments","NewPatientForm","_React$Component","_getPrototypeOf2","_this","classCallCheck","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","savePatient","event","preventDefault","_this$state","state","name","birthDate","patientData","FormData","target","toISOString","substring","diseaseId","doctorId","props","create","alert","handleOnChange","value","attr","setState","defineProperty","inherits","createClass","key","_this2","react_default","createElement","Modal","trigger","Button","Header","Content","Form","Field","label","control","Input","onChange","react_semantic_ui_datepickers_default","onDateChange","date","Actions","positive","icon","content","onClick","React","Component","connect","_ref2","_callee2","_context2","_x2","patients","PatientsListContainer","getPatients","className","map","react_router_dom","to","style","cursor","PatientsList","store","actionCreaters","associations","getAssociations","patientId","createAssociation","AssociationForm","_Component","text","showModal","onSubmit","getData","warn","_this$props$getData","predicate","associationType","closeModal","_this$props","position","_this$props$style","iconClassName","Icon","open","onClose","TextArea","e","history","getDraft","createDraft","commitDraft","getMedicines","getGraph","PatientInfoContainer","getHistory","_this$props$patient","dateObj","Date","year","getFullYear","month","getMonth","now","age","components_AssociationForm_AssociationForm","submittedOn","Loader","PatientInfo","SideBar","react","Menu","pointing","vertical","sidebarRoutes","route","path","activeClassName","Item","as","PatientContainer","getPatient","match","Sidebar_SideBar","react_router","routes","component","Dimmer","active","inverted","PureComponent","Patient","patientThunks","AssociationsContainer","_React$PureComponent","_componentDidMount","association","Associations","CurrentStateContainer","description","attributes","medicines","CurrentState","draft","abrupt","result","clear","diseases","getLabel","recommended","color","NextState","Label","tag","errors","error","i","code","reason","basic","confirmState","disease","states","graph","defaultState","transitions","cytoscape","use","popper","Graph","cyRefs","tooltip","previousTappedNodes","setCY","refName","cy","on","evt","remove","removeListener","nodes","find","document","textContent","from","children","forEach","child","appendChild","scheduleUpdate","selected","grabbable","edges","transition","source","layout","selector","background-color","source-arrow-shape","width","curve-style","line-color","mid-target-arrow-color","mid-target-arrow-shape","styleContainer","background","borderRadius","height","paddingTop","zIndex","size","build","elements","objectSpread","cyRef","NewStatusForm","healthMatter","handleSubmit","onDraftUpdate","diseaseData","onHMChange","onResultChange","getAssociationData","attribute","_this$state2","options","Group","inline","Select","placeholder","combineReducers","undefined","action","toConsumableArray","nextStates","createStore","reducers","applyMiddleware","reduxThunk","StatusDraftContainer","symptomsAmount","medicinesAmount","disableSubmit","onPlusClick","onDraftSubmit","updatePatientStatusData","medicineId","updated","push","stateId","getNextStates","nextProps","_this$props2","currentState","currentMedicines","filter","diseaseItem","some","getState","medicine","Divider","fitted","NewStatusForm_NewStatusForm_NewStatusForm","statusId","fill","el","index","option","fluid","disabled","StatusDraft","draftThunks","clearDraft","_ref3","_callee3","_context3","_x3","nextStatesThunks","getDisease","diseaseThunks","StatesContainer","draftInitData","t0","diseaseName","updateState","associationData","getDiseases","_componentWillReceiveProps","Fragment","StatusDraft_StatusDraft","components_Graph_Graph","nextState","NextState_NextState_NextState","assign","States","headerRoutes","attached","ReactDOM","render","es","Header_Header","exact","getElementById"],"mappings":"yhBAGaA,EAAM,SAAAC,GAAO,MAAK,CAC3BC,KAJuB,cAKvBC,QAASF,ICLPG,EAAU,8BAET,SAASC,EAAKC,GASjB,OAAOC,MAAMH,EAAUE,EARR,CACXE,KAAM,OACNC,QAAS,CACLC,eAAgB,mBAChBC,8BAA+B,OAIHC,KAAK,SAAAC,GACrC,OAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IACrCD,EAASE,OAETC,QAAQC,OAAOJ,EAASK,cAKpC,SAASC,EAAMb,EAAKc,GACvB,IAAMC,EAAS,CACXC,OAAQ,OACRb,QAAS,CACLC,eAAgB,mBAChBC,8BAA+B,KAEnCY,KAAMC,KAAKC,UAAUL,IAGzB,OAAOb,MAAMH,EAAUE,EAAKe,GCxBzB,SAASK,EAAgBC,GAC5B,OAAOtB,EAAG,aAAAuB,OAAcD,IAGrB,SAASE,EAAeT,GAC3B,OAAOD,EAAK,YAAaC,GCRtB,IAAMf,EAAM,SAACsB,GAChB,sBAAAG,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAMC,GAAN,IAAApC,EAAA,OAAAgC,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACmBC,EAAuBf,GAD1C,OACG1B,EADHsC,EAAAI,KAGHC,QAAQC,IAAI,cAAe5C,GAE3BoC,EAASS,EAAmB7C,IALzB,wBAAAsC,EAAAQ,SAAAX,MAAP,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,ICQSC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAmB,KAAAE,GAAA,QAAAK,EAAAN,UAAAO,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAV,UAAAU,GAAA,OAAAN,EAAAxB,OAAA+B,EAAA,EAAA/B,CAAAmB,MAAAI,EAAAvB,OAAAgC,EAAA,EAAAhC,CAAAqB,IAAAY,KAAAf,MAAAK,EAAA,CAAAJ,MAAAtB,OAAA+B,MACIM,YAAc,SAACC,GACXA,EAAMC,iBADe,IAAAC,EAEOb,EAAKc,MAAzBC,EAFaF,EAEbE,KAAMC,EAFOH,EAEPG,UAERC,GADO,IAAIC,SAASP,EAAMQ,QACZ,CAChBJ,KAAMA,EACNC,UAAWA,EAAUI,cAAcC,UAAU,EAAG,IAChDC,UAAW,EACXC,SAAU,IAGdvB,EAAKwB,MAAMC,OAAOR,GAClBS,MAAM,YAbd1B,EAgBI2B,eAAiB,SAACC,EAAOC,GAAR,OAAiB7B,EAAK8B,SAALtD,OAAAuD,EAAA,EAAAvD,CAAA,GAAiBqD,EAAOD,KAhB9D5B,EAAA,OAAAxB,OAAAwD,EAAA,EAAAxD,CAAAqB,EAAAC,GAAAtB,OAAAyD,EAAA,EAAAzD,CAAAqB,EAAA,EAAAqC,IAAA,SAAAN,MAAA,WAkBc,IAAAO,EAAAxC,KACN,OACIyC,EAAAzD,EAAA0D,cAACC,EAAA,EAAD,CAAOC,QAASH,EAAAzD,EAAA0D,cAACG,EAAA,EAAD,qBACZJ,EAAAzD,EAAA0D,cAACC,EAAA,EAAMG,OAAP,wBACAL,EAAAzD,EAAA0D,cAACC,EAAA,EAAMI,QAAP,KACIN,EAAAzD,EAAA0D,cAACM,EAAA,EAAD,KACIP,EAAAzD,EAAA0D,cAACM,EAAA,EAAKC,MAAN,CAAYC,MAAM,OAAOlG,KAAK,OAAOmG,QAASC,IAC1CC,SAAU,SAACrC,GAAD,OAAWwB,EAAKR,eAAehB,EAAMQ,OAAOS,MAAO,WAGjEQ,EAAAzD,EAAA0D,cAACM,EAAA,EAAKC,MAAN,KACIR,EAAAzD,EAAA0D,cAAA,oBACAD,EAAAzD,EAAA0D,cAACY,EAAAtE,EAAD,CAAoBuE,aAAc,SAACC,GAAD,OAAUhB,EAAKR,eAAewB,EAAM,mBAIlFf,EAAAzD,EAAA0D,cAAEC,EAAA,EAAMc,QAAR,KACIhB,EAAAzD,EAAA0D,cAAEG,EAAA,EAAF,CACIa,UAAQ,EACRC,KAAK,YACLC,QAAQ,OACR5G,KAAK,SACL6G,QAAS7D,KAAKe,oBAxCtCb,EAAA,CAAoC4D,IAAMC,WCT7BjH,GD0DEkH,YACX,KACA,CACIlC,ODnDc,SAAC5D,GACnB,sBAAA+F,EAAApF,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAiF,EAAM/E,GAAN,OAAAJ,EAAAC,EAAAI,KAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,cAAA4E,EAAA5E,KAAA,EACGC,EAAsBtB,GADzB,wBAAAiG,EAAAtE,SAAAqE,MAAP,gBAAAE,GAAA,OAAAH,EAAAlE,MAAAC,KAAAC,YAAA,KC+CW+D,CAKb9D,GC/DiB,SAAAmE,GAAQ,MAAK,CAC5BrH,KAJwB,eAKxBC,QAASoH,aCCPC,8LAEEtE,KAAK6B,MAAM0C,+CAGL,IACEF,EAAarE,KAAK6B,MAAlBwC,SAER,OACI5B,EAAAzD,EAAA0D,cAAA,WAAS8B,UAAW,gBAChB/B,EAAAzD,EAAA0D,cAAA,sBACAD,EAAAzD,EAAA0D,cAAA,MAAI8B,UAAW,qBACVH,EAASI,IAAI,SAAA1H,GACV,OACI0F,EAAAzD,EAAA0D,cAACgC,EAAA,EAAD,CAASC,GAAE,YAAAjG,OAAc3B,EAAQ0B,GAAtB,SAAiC8D,IAAKxF,EAAQ0B,IACrDgE,EAAAzD,EAAA0D,cAAA,MACI8B,UAAW,oBACXI,MAAO,CAAEC,OAAQ,YAChB9H,EAAQqE,KAHb,KAGqBrE,EAAQsE,UAH7B,iBAfIyC,IAAMC,WA6B7Be,EAAed,YACxB,SAAAe,GAAK,MAAK,CACNV,SAAUU,EAAMV,UAAY,KAEhC,CACIE,YCrCW,WACf,sBAAA3F,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAMC,GAAN,IAAAkF,EAAA,OAAAtF,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,ELDApC,EAAI,aKCJ,OACGkH,EADHhF,EAAAI,KAGHN,EAAS6F,EAAmBX,IAHzB,wBAAAhF,EAAAQ,SAAAX,MAAP,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,KD+BwB+D,CAO1BM,gEEtCWxH,EAAM,SAAAmI,GAAY,MAAK,CAChCjI,KAL4B,mBAM5BC,QAASgI,ICJN,SAASC,EAAiBC,GAC7B,OAAOhI,EAAG,2BAAAuB,OAA4ByG,IAGnC,SAASC,EAAmBlH,GAC/B,OAAOD,EAAI,kBAAoBC,GCJ5B,ICGMmH,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAjF,EAAAC,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAmB,KAAAqF,GAAA,QAAA9E,EAAAN,UAAAO,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAV,UAAAU,GAAA,OAAAN,EAAAxB,OAAA+B,EAAA,EAAA/B,CAAAmB,MAAAI,EAAAvB,OAAAgC,EAAA,EAAAhC,CAAAwG,IAAAvE,KAAAf,MAAAK,EAAA,CAAAJ,MAAAtB,OAAA+B,MACEU,MAAQ,CACJoE,KAAM,GACNC,WAAW,GAHjBnF,EAMEoF,SAAW,WAC2B,oBAAvBpF,EAAKwB,MAAM6D,SAClBhG,QAAQiG,KAAK,kCAFJ,IAAAC,EAKevF,EAAKwB,MAAM6D,UAA/BG,EALKD,EAKLC,UAAW7I,EALN4I,EAKM5I,KACbuI,EAAOlF,EAAKc,MAAMoE,KAExBlF,EAAKwB,MAAMC,OAAO,CACd+D,YACAN,OACAO,gBAAiB9I,IAGrBqD,EAAK0F,cApBX1F,EAuBE0F,WAAa,WACT1F,EAAK8B,SAAS,CAAEqD,WAAW,KAxBjCnF,EAAA,OAAAxB,OAAAwD,EAAA,EAAAxD,CAAAwG,EAAAC,GAAAzG,OAAAyD,EAAA,EAAAzD,CAAAwG,EAAA,EAAA9C,IAAA,SAAAN,MAAA,WA2BY,IAAAO,EAAAxC,KAAAgG,EAC2BhG,KAAK6B,MAA9BoE,EADFD,EACEC,SADFC,EAAAF,EACYpB,aADZ,IAAAsB,EACoB,GADpBA,EAAAhF,EAEsBlB,KAAKmB,MAAzBoE,EAFFrE,EAEEqE,KAAMC,EAFRtE,EAEQsE,UAEVW,EAAgB,wBAEpB,OAAQF,GACR,IAAK,QACDE,GAAiB,gCACjB,MACJ,QACIA,GAAiB,+BAGrB,OACI1D,EAAAzD,EAAA0D,cAACC,EAAA,EAAD,CACIC,QACIH,EAAAzD,EAAA0D,cAAA,QAAMmB,QAAS,WAAQrB,EAAKL,SAAS,CAAEqD,WAAW,MAC9C/C,EAAAzD,EAAA0D,cAAC0D,EAAA,EAAD,CAAMhF,KAAK,sBAAsBoD,UAAW2B,EAAevB,MAAOA,KAI1EyB,KAAMb,EACNc,QAAStG,KAAK+F,YAEdtD,EAAAzD,EAAA0D,cAACC,EAAA,EAAMG,OAAP,wBACAL,EAAAzD,EAAA0D,cAACC,EAAA,EAAMI,QAAP,KACIN,EAAAzD,EAAA0D,cAACM,EAAA,EAAD,KACIP,EAAAzD,EAAA0D,cAACM,EAAA,EAAKC,MAAN,CAAYE,QAASoD,IAAUtE,MAAOsD,EAAMlC,SAAU,SAACmD,GAAQhE,EAAKL,SAAS,CAAEoD,KAAMiB,EAAEhF,OAAOS,aAGtGQ,EAAAzD,EAAA0D,cAACC,EAAA,EAAMc,QAAP,KACIhB,EAAAzD,EAAA0D,cAACG,EAAA,EAAD,CAAQa,UAAQ,EAACC,KAAK,YAAYC,QAAQ,OAAOC,QAAS7D,KAAKyF,iBA3DjFJ,EAAA,CAAqCtB,aAkEtBC,cACX,KACA,CACIlC,OD/Dc,SAAA5D,GAClB,sBAAA+F,EAAApF,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAiF,EAAM/E,GAAN,OAAAJ,EAAAC,EAAAI,KAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,cAAA4E,EAAA5E,KAAA,EACGC,EAA0BtB,GAD7B,OAGHA,EAAKlB,KAAOkB,EAAK4H,uBACV5H,EAAK4H,gBAEZ3G,EFN2B,CAC/BnC,KAZ4B,mBAa5BC,QEIgCiB,IANzB,wBAAAiG,EAAAtE,SAAAqE,MAAP,gBAAAE,GAAA,OAAAH,EAAAlE,MAAAC,KAAAC,YAAA,KC2DW+D,CAKbqB,GC1EWvI,EAAM,SAAA2J,GAAO,MAAK,CAC3BzJ,KAJuB,cAKvBC,QAASwJ,ICHN,SAASC,EAAUjI,GACtB,OAAOtB,EAAG,aAAAuB,OAAcD,EAAd,kBAGP,SAASkI,EAAalI,EAAIP,GAC7B,OZ0BG,SAAcd,EAAKc,GACtB,IAAMC,EAAS,CACXC,OAAQ,MACRb,QAAS,CACLC,eAAgB,mBAChBC,8BAA+B,KAEnCY,KAAMC,KAAKC,UAAUL,IAGzB,OAAOb,MAAMH,EAAUE,EAAKe,GYpCrBrB,CAAG,aAAA4B,OAAcD,EAAd,iBAAiCP,GAGxC,SAAS0I,EAAanI,GACzB,OAAOR,EAAI,aAAAS,OAAcD,EAAd,kBAOR,IAIMoI,EAAe,SAAClF,GACzB,OAAOxE,EAAG,aAAAuB,OAAciD,EAAd,eAWP,IAAMmF,EAAW,SAACnF,GACrB,OAAOxE,EAAG,aAAAuB,OAAciD,EAAd,sBC5BRoF,sMACmB,IAAAf,EACehG,KAAK6B,MAA7B9E,EADSiJ,EACTjJ,SACRiK,EAFiBhB,EACAgB,YACNjK,EAAQ0B,qCAGb,IAAAwI,EACsBjH,KAAK6B,MAAM9E,QAA/BqE,EADF6F,EACE7F,KAAMC,EADR4F,EACQ5F,UACNoF,EAAYzG,KAAK6B,MAAjB4E,QAEFS,EAAU,IAAIC,KAAK9F,GACnB+F,EAAOF,EAAQG,cACfC,EAAQJ,EAAQK,WAChBC,EAAM,IAAIL,KAEVM,EAAMD,EAAIH,cAAgBD,GAAQI,EAAID,WAAaD,EAAQ,EAAI,EAAI,GAEzE,OACI7E,EAAAzD,EAAA0D,cAAA,SAAO8B,UAAU,eACb/B,EAAAzD,EAAA0D,cAAA,WAAS8B,UAAU,oBACf/B,EAAAzD,EAAA0D,cAAA,UAAKtB,IAETqB,EAAAzD,EAAA0D,cAAA,WAAS8B,UAAU,2BACf/B,EAAAzD,EAAA0D,cAAA,kBACAD,EAAAzD,EAAA0D,cAAA,WACID,EAAAzD,EAAA0D,cAAA,OAAKkC,MAAO,CAAEqB,SAAU,aACpBxD,EAAAzD,EAAA0D,cAACgF,EAAD,CAAiBzB,SAAS,QAAQP,QAAS,iBAAO,CAAEG,UAAS,qBAAAnH,OAAuB+I,EAAvB,KAA+BzK,KAAM,cAClGyF,EAAAzD,EAAA0D,cAAA,wBAAgBrB,MAK5BoB,EAAAzD,EAAA0D,cAAA,WAAS8B,UAAU,uBACf/B,EAAAzD,EAAA0D,cAAA,qBACC+D,EAAUA,EAAQhC,IAAI,SAAAzD,GAAK,OACxByB,EAAAzD,EAAA0D,cAAA,OAAKH,IAAKvB,EAAMvC,IACZgE,EAAAzD,EAAA0D,cAAA,iBAAS1B,EAAM2G,aACflF,EAAAzD,EAAA0D,cAAA,iBAAS1B,EAAMG,MAAMC,MACrBqB,EAAAzD,EAAA0D,cAAA,cACMD,EAAAzD,EAAA0D,cAACkF,EAAA,EAAD,eAvCC9D,IAAMC,YA+C5B8D,GAAc7D,YACvB,SAAAe,GAAK,MAAK,CACNhI,QAASgI,EAAMhI,QACf0J,QAAS1B,EAAM0B,UAEnB,CACIO,WCzDW,SAAC7B,GAChB,sBAAAvG,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAOC,GAAP,IAAAsH,EAAA,OAAA1H,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EFuBApC,EAAG,aAAAuB,OEtBmCyG,EFsBnC,cEvBH,OACGsB,EADHpH,EAAAI,KAEHC,QAAQC,IAAI,cAAe8G,GAC3BtH,EAAS6F,EAAmByB,IAHzB,wBAAApH,EAAAQ,SAAAX,MAAP,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,KDkDuB+D,CAQzB+C,GExDWe,WAAU,WACnB,OACIC,EAAA,uBAAOvD,UAAW,WACduD,EAAA,cAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,UAAQ,GAClBC,GAAc1D,IAAI,SAAA2D,GAAK,OACpBL,EAAA,cAACrD,EAAA,EAAD,CAASC,GAAIyD,EAAMC,KAAM9F,IAAK6F,EAAMhH,KAAMkH,gBAAiB,uBACvDP,EAAA,cAACC,EAAA,EAAKO,KAAN,CAAWC,GAAI,KACXpH,KAAMgH,EAAMhH,wBCJlCqH,uMAEEzI,KAAK6B,MAAM6G,WAAW1I,KAAK6B,MAAM8G,MAAMxK,OAAOgH,4CAI9C,OAAKnF,KAAK6B,MAAM9E,QAAQ0B,GAQpBgE,EAAAzD,EAAA0D,cAAA,WAAS8B,UAAU,WACf/B,EAAAzD,EAAA0D,cAACkG,GAAD,MACAnG,EAAAzD,EAAA0D,cAAA,OAAK8B,UAAW,gBACZ/B,EAAAzD,EAAA0D,cAACmG,EAAA,EAAD,KACKC,GAAOrE,IAAI,SAAA2D,GAAK,OACb3F,EAAAzD,EAAA0D,cAACmG,EAAA,EAAD,CAAOR,KAAMD,EAAMC,KAAMU,UAAWX,EAAMW,UAAWxG,IAAK6F,EAAMC,YAX5E5F,EAAAzD,EAAA0D,cAACsG,GAAA,EAAD,CAAQC,QAAM,EAACC,UAAQ,GACnBzG,EAAAzD,EAAA0D,cAACkF,EAAA,EAAD,CAAQsB,UAAQ,YATLpF,IAAMqF,gBA0BxBC,GAAUpF,YACnB,SAAAe,GAAK,MAAK,CACNhI,QAASgI,EAAMhI,UAEnB,CACI2L,WAAYW,GALGrF,CAOrByE,ICtCWa,GAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAzK,OAAAyB,EAAA,EAAAzB,CAAAmB,KAAAsJ,GAAAzK,OAAA+B,EAAA,EAAA/B,CAAAmB,KAAAnB,OAAAgC,EAAA,EAAAhC,CAAAyK,GAAAvJ,MAAAC,KAAAC,YAAA,OAAApB,OAAAwD,EAAA,EAAAxD,CAAAyK,EAAAC,GAAA1K,OAAAyD,EAAA,EAAAzD,CAAAyK,EAAA,EAAA/G,IAAA,oBAAAN,MAAA,eAAAuH,EAAA3K,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAA,SAAAC,IAAA,OAAAH,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAEcS,KAAK6B,MAAMqD,gBAAgBlF,KAAK6B,MAAMsD,WAFpD,wBAAA9F,EAAAQ,SAAAX,EAAAc,SAAA,yBAAAwJ,EAAAzJ,MAAAC,KAAAC,YAAA,KAAAsC,IAAA,SAAAN,MAAA,WAKc,IACEgD,EAAiBjF,KAAK6B,MAAtBoD,aAER,OACI8C,EAAA,qBAAKvD,UAAU,gBACXuD,EAAA,wFACC9C,EAAaR,IAAI,SAAAgF,GACd,OACI1B,EAAA,qBAAKxF,IAAKkH,EAAYhL,IAClBsJ,EAAA,uBAAGA,EAAA,uBAAI0B,EAAYzM,KAAhB,MAA4ByM,EAAYlE,cAdvE+D,EAAA,CAA2CxF,iBAuB9B4F,GAAe1F,YACxB,SAAAe,GAAK,MAAK,CACNE,aAAcF,EAAME,aACpBE,UAAWJ,EAAMhI,QAAQ0B,KAE7B,CACIyG,gBR9BW,SAACC,GAChB,sBAAAvG,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAMC,GAAN,IAAA8F,EAAA,OAAAlG,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACwBC,EAAwB2F,GADhD,OACGF,EADH5F,EAAAI,KAEHC,QAAQC,IAAI,mBAAoBsF,GAEhC9F,EAASS,EAAmBqF,IAJzB,wBAAA5F,EAAAQ,SAAAX,MAAP,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,KQuBwB+D,CAQ1BsF,IChCIK,oLACQ,IACE/L,EAAWoC,KAAK6B,MAAM9E,QAAtBa,OACAuD,EAAUvD,EAAVuD,MACR,OACIsB,EAAAzD,EAAA0D,cAAA,WAAS8B,UAAU,gBACf/B,EAAAzD,EAAA0D,cAAA,+GACAD,EAAAzD,EAAA0D,cAAA,UAAKvB,EAAMC,MACXqB,EAAAzD,EAAA0D,cAAA,WACID,EAAAzD,EAAA0D,cAAA,8DACAD,EAAAzD,EAAA0D,cAAA,SAAIvB,EAAMyI,cAEdnH,EAAAzD,EAAA0D,cAAA,WACID,EAAAzD,EAAA0D,cAAA,wDACAD,EAAAzD,EAAA0D,cAAA,UACK9E,EAAOiM,WAAWrJ,OAAS5C,EAAOiM,WAAWpF,IAAI,SAAAvC,GAAI,OAClDO,EAAAzD,EAAA0D,cAAA,MAAIH,IAAKL,EAAKd,MAAO9C,KAAKC,UAAU2D,MAClC,6GAGdO,EAAAzD,EAAA0D,cAAA,WACID,EAAAzD,EAAA0D,cAAA,oEACAD,EAAAzD,EAAA0D,cAAA,UACK9E,EAAOkM,UAAUtJ,OAAS5C,EAAOkM,UAAUrF,IAAI,SAAAvC,GAAI,OAChDO,EAAAzD,EAAA0D,cAAA,MAAIH,IAAKL,EAAKd,MAAO9C,KAAKC,UAAU2D,MAClC,qHAzBM4B,IAAMqF,eAgC7BY,GAAe/F,YACxB,SAAAe,GAAK,MAAK,CACNhI,QAASgI,EAAMhI,UAFKiH,CAI1B2F,ICnCW7M,GAAM,SAAAkN,GAAK,MAAK,CACzBhN,KALqB,YAMrBC,QAAS+M,ICHA7M,GAAM,SAACsB,GAChB,sBAAAG,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAOC,GAAP,IAAA6K,EAAA,OAAAjL,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACiBC,EAAiBf,GADlC,cACGuL,EADH3K,EAAAI,KAEHC,QAAQC,IAAI,iBAAkBqK,GAC9B7K,EAASS,GAAmBoK,IAHzB3K,EAAA4K,OAAA,SAKID,GALJ,wBAAA3K,EAAAQ,SAAAX,MAAP,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,IASS6B,GAAS,SAACrD,EAAIuL,GACvB,sBAAA/F,EAAApF,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAiF,EAAO/E,GAAP,IAAA+K,EAAA,OAAAnL,EAAAC,EAAAI,KAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,cAAA4E,EAAA5E,KAAA,EACkBC,EAAoBf,EAAIuL,GAD1C,OACGE,EADH/F,EAAA1E,KAGHC,QAAQC,IAAI,eAAgBuK,GAC5B/K,EAASS,GAAmBoK,IAJzB,wBAAA7F,EAAAtE,SAAAqE,MAAP,gBAAAE,GAAA,OAAAH,EAAAlE,MAAAC,KAAAC,YAAA,IAcSkK,GAAQ,WACjB,OAAO,SAAAhL,GACHA,EDrBoB,CACxBnC,KATuB,kBEEdF,GAAM,SAAAsN,GAAQ,MAAK,CAC5BpN,KAJwB,eAKxBC,QAASmN,oBCAb,SAASC,GAAUC,GACf,OAAoB,OAAhBA,EACO,CACHC,MAAO,SACPhF,KAAM,yIAEP+E,EAMA,CACHC,MAAO,QACPhF,KAAM,kFAPC,CACHgF,MAAO,MACPhF,KAAM,+FAQX,IAAMiF,GAAY,SAAC3I,GAAD,OACrBY,EAAAzD,EAAA0D,cAAA,OAAK8B,UAAU,8BACX/B,EAAAzD,EAAA0D,cAACgF,EAAD,CAAiBzB,SAAS,QAAQP,QAAS,iBAAO,CAAEG,UAAS,yBAAAnH,OAA2BmD,EAAMpD,GAAjC,KAAwCzB,KAAM,YAC3GyF,EAAAzD,EAAA0D,cAAC+H,GAAA,EAAD,CAAOjG,UAAU,kBACb+F,MAAOF,GAASxI,EAAMyI,aAAaC,MAAOG,KAAG,GAC5CL,GAASxI,EAAMyI,aAAa/E,MAEjC9C,EAAAzD,EAAA0D,cAAA,OAAK8B,UAAU,qBACX/B,EAAAzD,EAAA0D,cAAA,MAAI8B,UAAU,kBACT3C,EAAMV,MAAMC,MAEjBqB,EAAAzD,EAAA0D,cAAA,yBAAiBb,EAAMV,MAAMyI,aAC5B/H,EAAM8I,QAAUlI,EAAAzD,EAAA0D,cAAA,qBAEZb,EAAM8I,OAAOlG,IAAI,SAACmG,EAAOC,GAAR,OACdpI,EAAAzD,EAAA0D,cAAA,KAAGH,IAAKsI,GAAR,SAAkBD,EAAME,KAAxB,aAAwCF,EAAMG,WAItDtI,EAAAzD,EAAA0D,cAACG,EAAA,EAAD,CAAQ2B,UAAU,mBAAmBwG,OAAK,EAACT,MAAM,OAC7C1G,QAAS,kBAAMhC,EAAMoJ,aAAapJ,EAAMV,SAD5C,cCtCCrE,GAAM,SAAAoO,GAAO,MAAK,CAC3BlO,KAJuB,cAKvBC,QAASiO,ICFA/N,GAAM,SAACgI,GAChB,sBAAAvG,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAOC,GAAP,IAAA+L,EAAA,OAAAnM,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EZWApC,EAAG,aAAAuB,OYVuCyG,EZUvC,uBYXH,cACG+F,EADH7L,EAAAI,KAGHC,QAAQC,IAAI,cAAeuL,GAE3B/L,EAAS6F,GAAmBkG,IALzB7L,EAAA4K,OAAA,SAOIiB,GAPJ,wBAAA7L,EAAAQ,SAAAX,MAAP,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,ICDSnD,GAAM,SAAAqO,GAAM,MAAK,CAC1BnO,KAJ2B,iBAK3BC,QAASkO,ICFAhO,GAAM,SAACgI,GAChB,sBAAAvG,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAOC,GAAP,IAAAgM,EAAA,OAAApM,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,Ed2BApC,EAAG,aAAAuB,Oc1BqCyG,Ed0BrC,yBc3BH,cACGgG,EADH9L,EAAAI,KAEHC,QAAQC,IAAI,WAAYwL,GACxBhM,EAAS6F,GAAmBmG,IAHzB9L,EAAA4K,OAAA,SAKIkB,GALJ,wBAAA9L,EAAAQ,SAAAX,MAAP,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,ICDSnD,GAAM,SAAAgN,GAAS,MAAK,CAC7B9M,KAJyB,gBAKzBC,QAAS6M,ICFAhN,GAAM,SAAAsO,GAAK,MAAK,CACzBpO,KAJqB,YAKrBC,QAASmO,IAOPC,GAAe,CACnBF,OAAQ,GACRG,YAAa,mCCRfC,aAAUC,IAAIC,MAEP,IAAMC,GAAb,SAAApG,GAKE,SAAAoG,EAAa7J,GAAO,IAAAxB,EAAA,OAAAxB,OAAAyB,EAAA,EAAAzB,CAAAmB,KAAA0L,IAChBrL,EAAAxB,OAAA+B,EAAA,EAAA/B,CAAAmB,KAAAnB,OAAAgC,EAAA,EAAAhC,CAAA6M,GAAA5K,KAAAd,KAAM6B,KALV8J,OAAS,GAIWtL,EAHpBuL,QAAU,KAGUvL,EAFpBwL,oBAAsB,GAEFxL,EAQpByL,MAAQ,SAACC,GAAD,OAAa,SAACC,GAClB3L,EAAKsL,OAAOI,GAAWC,EAEvB3L,EAAKsL,OAAOI,GAASE,GAAG,MAAO,SAACC,GACxBA,EAAI1K,SAAWnB,EAAKsL,OAAOI,KAG/B1L,EAAKuL,QAAQO,SAET9L,EAAKwL,oBAAoBE,KACzB1L,EAAKwL,oBAAoBE,GAASK,eAAe,YACjD/L,EAAKsL,OAAOI,GAASK,eAAe,uBAI5C/L,EAAKsL,OAAOI,GAASM,QAAQJ,GAAG,MAAO,SAACC,GAChC7L,EAAKwL,oBAAoBE,KACzB1L,EAAKwL,oBAAoBE,GAASK,eAAe,YACjD/L,EAAKsL,OAAOI,GAASK,eAAe,oBAGxC/L,EAAKwL,oBAAoBE,GAAWG,EAAI1K,OAExC,IAAM/C,GAAMyN,EAAI1K,OAAO/C,KAEjB0C,EAAQd,EAAKwB,MAAMuJ,MAAMD,OAAOmB,KAAK,SAAAnL,GAAK,OAAIA,EAAM1C,KAAOA,IAE3DgN,EAASS,EAAI1K,OAAOiK,OAAO,CAC7B7H,QAAS,WACL,IAAMxC,EAAOmL,SAAS7J,cAAc,MAEpCtB,EAAKoL,YAAcrL,EAAMC,KAEzB,IAAMwI,EAAc2C,SAAS7J,cAAc,KAmB3C,OAjBAkH,EAAY4C,YAAcrL,EAAMyI,YAEhClJ,MAAM+L,KAAKpM,EAAKuL,QAAQc,UAAUC,QAAQ,SAAAC,GAAK,OAAIA,EAAMT,WAEzD9L,EAAKuL,QAAQiB,YAAYzL,GACzBf,EAAKuL,QAAQiB,YAAYjD,GAEzB2C,SAASlO,KAAKwO,YAAYxM,EAAKuL,SAE/BM,EAAI1K,OAAOyK,GAAG,WAAY,WACtBR,EAAOqB,mBAGXzM,EAAKsL,OAAOI,GAASE,GAAG,kBAAmB,WACvCR,EAAOqB,mBAGJzM,EAAKuL,eAzDxBvL,EAAKuL,QAAUW,SAAS7J,cAAc,OAEtCrC,EAAKuL,QAAQhH,MAAb,+GALgBvE,EALtB,OAAAxB,OAAAwD,EAAA,EAAAxD,CAAA6M,EAAApG,GAAAzG,OAAAyD,EAAA,EAAAzD,CAAA6M,EAAA,EAAAnJ,IAAA,SAAAN,MAAA,WAuEY,IAAA+D,EACoBhG,KAAK6B,MAAvBjE,EADFoI,EACEpI,OAAQwN,EADVpF,EACUoF,MAEViB,EAAQjB,EAAMD,OAAO1G,IAAI,SAAAtD,GAC3B,MAAO,CACHjD,KAAM,CAAEO,GAAI0C,EAAM1C,GAAIyE,MAAO/B,EAAMC,MACnC2L,SAAU5L,EAAM1C,KAAOb,EAAOuD,MAAM1C,GACpCuO,WAAW,KAGbC,EAAQ7B,EAAME,YAAY7G,IAAI,SAAAyI,GAAU,MAAK,CAAEhP,KAAM,CAAEiP,OAAQD,EAAWT,KAAMjL,OAAQ0L,EAAWvI,OACnGyI,EAAS,CAAEhM,KAAM,gBACjBwD,EAAQ,CACV,CACIyI,SAAU,OACVzI,MAAO,CACH0I,mBAAoB,QACpBpK,MAAO,cACPqK,qBAAsB,uBAG9B,CACIF,SAAU,gBACVzI,MAAO,CACH0I,mBAAoB,UAG5B,CACID,SAAU,OACVzI,MAAO,CACH4I,MAAO,EACPC,cAAe,SACfC,aAAc,OACdC,yBAA0B,OAC1BC,yBAA0B,wBAKhCC,EAAiB,CACnBC,WAAY,OACZC,aAAc,OAGlB,OACItL,EAAAzD,EAAA0D,cAAA,OAAKkC,MAAO,CAAEoJ,OAAQ,OAAQC,WAAY,SACtCxL,EAAAzD,EAAA0D,cAACC,EAAA,EAAD,CAAOC,QAASH,EAAAzD,EAAA0D,cAAC0D,EAAA,EAAD,CAAMhF,KAAK,0BAA0BwD,MAAO,CAAEqB,SAAU,WAAYiI,OAAQ,KAASC,KAAK,cACtG1L,EAAAzD,EAAA0D,cAACC,EAAA,EAAMI,QAAP,KACIN,EAAAzD,EAAA0D,cAAC0L,GAAA,eAAD,CACIC,SAAU,CAAEhC,QAAOY,SACnBG,OAAQA,EACRxI,MAAOA,EACPiJ,eAAchP,OAAAyP,EAAA,EAAAzP,CAAA,CACVmP,OAAQ,OACRR,MAAO,QACJK,GAEPU,MAAOvO,KAAK8L,MAAM,aAI9BrJ,EAAAzD,EAAA0D,cAAC0L,GAAA,eAAD,CACIC,SAAU,CAAEhC,QAAOY,SACnBsB,MAAOvO,KAAK8L,MAAM,SAClBsB,OAAQA,EACRxI,MAAOA,EACPiJ,eAAgBA,SAzIlCnC,EAAA,CAA2B3H,aAgJZC,eACX,SAAAe,GAAK,MAAK,CACNqG,MAAOrG,EAAMqG,MACbxN,OAAQmH,EAAMhI,QAAQa,SAHfoG,CAKb0H,wBCxJmB8C,sNACjBrN,MAAQ,CACJsN,aAAc,GACdvE,OAAQ,MAkBZwE,aAAe,SAAC1N,GACZA,EAAMC,iBADgB,IAEd0N,EAAkBtO,EAAKwB,MAAvB8M,cAFczN,EAGWb,EAAKc,MAA9BsN,EAHcvN,EAGduN,aAAcvE,EAHAhJ,EAGAgJ,OAEhB9I,EAAOf,EAAKwB,MAAM+M,YAAYtC,KAAK,SAAApO,GAAI,OAAIA,EAAKO,KAAOgQ,IAAcrN,KAE3EuN,EACI,CAAElQ,GAAIgQ,EAAcxM,MAAOiI,EAAQ9I,YAI3CyN,WAAa,SAACrI,EAAD5H,GAAA,IAAMqD,EAANrD,EAAMqD,MAAN,OAAkB5B,EAAK8B,SAAS,CAAEsM,aAAcxM,OAE7D6M,eAAiB,SAAC9N,GAAD,OAAWX,EAAK8B,SAAS,CACtC+H,OAAQlJ,EAAMQ,OAAOS,WAGzB8M,mBAAqB,WACjB,MAAO,CACHlJ,UAAS,cAAAnH,OAAgB2B,EAAKc,MAAMsN,aAA3B,OAAA/P,OAA6C2B,EAAKc,MAAM+I,OAAxD,KACTlN,KAAM,+FApCO,IACTgS,EAAchP,KAAK6B,MAAnBmN,UACJA,EACAhP,KAAKmC,SAAS,CACVsM,aAAcO,EAAUvQ,GACxByL,OAAQ8E,EAAU/M,QAGtBjC,KAAKmC,SAAS,CACVsM,aAAc,GACdvE,OAAQ,sCA8BV,IAAAlE,EAC6BhG,KAAK6B,MAAhC2C,EADFwB,EACExB,UAAWoK,EADb5I,EACa4I,YADbK,EAEyBjP,KAAKmB,MAA9BsN,EAFAQ,EAEAR,aAAcvE,EAFd+E,EAEc/E,OACdgF,EAAUN,GAAeA,EAAYnK,IAAI,SAAAvC,GAC3C,MAAO,CACHK,IAAKL,EAAKzD,GACV8G,KAAMrD,EAAKd,KACXa,MAAOC,EAAKzD,MAIpB,OACIgE,EAAAzD,EAAA0D,cAAA,WAAS8B,UAAS,aAAA9F,OAAe8F,GAAa,KAEzC0K,GACGzM,EAAAzD,EAAA0D,cAACM,EAAA,EAAD,CAAMwB,UAAU,iBAAiBiB,SAAUzF,KAAK0O,cAC5CjM,EAAAzD,EAAA0D,cAACM,EAAA,EAAKmM,MAAN,CAAYC,QAAM,GACd3M,EAAAzD,EAAA0D,cAACM,EAAA,EAAKC,MAAN,CAAYuB,UAAU,mBAClB/B,EAAAzD,EAAA0D,cAACM,EAAA,EAAKqM,OAAN,CACInM,MAAM,sBACNgM,QAASA,EACTI,YAAY,OACZrN,MAAOwM,EACPpL,SAAUrD,KAAK6O,cAIvBpM,EAAAzD,EAAA0D,cAACM,EAAA,EAAKC,MAAN,CAAYuB,UAAU,mBAClB/B,EAAAzD,EAAA0D,cAACM,EAAA,EAAKC,MAAN,CACIE,QAASC,IACTF,MAAM,SACNjB,MAAOiI,EACP7G,SAAUrD,KAAK8O,kBAGvBrM,EAAAzD,EAAA0D,cAACG,EAAA,EAAD,CAAQ7F,KAAK,SAASgO,OAAK,EAACT,MAAM,SAAlC,UACCkE,GAAgBvE,GACjBzH,EAAAzD,EAAA0D,cAACgF,EAAD,CAAiB9C,MAAO,CAAEqB,SAAU,YAAcP,QAAS1F,KAAK+O,+BAnFjDjL,IAAMC,qBCOlCwL,gBAAgB,CAC3BtK,axBKW,WAAwB,IAAvB9D,EAAuBlB,UAAAO,OAAA,QAAAgP,IAAAvP,UAAA,GAAAA,UAAA,GAAf,GAAIwP,EAAWxP,UAAAO,OAAA,EAAAP,UAAA,QAAAuP,EACnC,OAAQC,EAAOzS,MACf,IApB4B,mBAqBxB,OAAOyS,EAAOxS,QAClB,IArB8B,qBAsB1B,MAAO,GACX,IAtB4B,mBAuBxB,SAAAyB,OAAAG,OAAA6Q,EAAA,EAAA7Q,CACOsC,GADP,CAEIsO,EAAOxS,UAEf,QACI,OAAOkE,IwBhBX6I,MZIW,WAAwB,IAAvB7I,EAAuBlB,UAAAO,OAAA,QAAAgP,IAAAvP,UAAA,GAAAA,UAAA,GAAf,GAAIwP,EAAWxP,UAAAO,OAAA,EAAAP,UAAA,QAAAuP,EACnC,OAAQC,EAAOzS,MACf,IApBqB,YAqBjB,OAAOyS,EAAOxS,QAClB,IArBuB,cAsBnB,MAAO,GACX,IAtB8B,qBAwB1B,OAAO4B,OAAAyP,EAAA,EAAAzP,CAAA,GACAsC,EADP,CAEIA,MAAOsO,EAAOxS,UAEtB,QACI,OAAOkE,IYhBXpE,QhCHW,WAAwB,IAAvBoE,EAAuBlB,UAAAO,OAAA,QAAAgP,IAAAvP,UAAA,GAAAA,UAAA,GAAf,GAAIwP,EAAWxP,UAAAO,OAAA,EAAAP,UAAA,QAAAuP,EACnC,OAAQC,EAAOzS,MACf,IAduB,cAenB,OAAOyS,EAAOxS,QAClB,IAfyB,gBAgBrB,MAAO,GACX,QACI,OAAOkE,IgCHXkD,S3BJW,WAAwB,IAAvBlD,EAAuBlB,UAAAO,OAAA,QAAAgP,IAAAvP,UAAA,GAAAA,UAAA,GAAf,GAAIwP,EAAWxP,UAAAO,OAAA,EAAAP,UAAA,QAAAuP,EACnC,OAAQC,EAAOzS,MACf,IAdwB,eAepB,OAAOyS,EAAOxS,QAClB,IAf0B,iBAgBtB,MAAO,GACX,QACI,OAAOkE,I2BFXwO,WNLW,WAAwB,IAAvBxO,EAAuBlB,UAAAO,OAAA,QAAAgP,IAAAvP,UAAA,GAAAA,UAAA,GAAf,GAAIwP,EAAWxP,UAAAO,OAAA,EAAAP,UAAA,QAAAuP,EACnC,OAAQC,EAAOzS,MACf,IAd2B,iBAevB,OAAOyS,EAAOxS,QAClB,IAf6B,mBAgBzB,MAAO,GACX,QACI,OAAOkE,IMDX+J,QRNW,WAAwB,IAAvB/J,EAAuBlB,UAAAO,OAAA,QAAAgP,IAAAvP,UAAA,GAAAA,UAAA,GAAf,GAAIwP,EAAWxP,UAAAO,OAAA,EAAAP,UAAA,QAAAuP,EACnC,OAAQC,EAAOzS,MACf,IAduB,cAenB,OAAOyS,EAAOxS,QAClB,IAfyB,gBAgBrB,MAAO,GACX,QACI,OAAOkE,IQAXiJ,SVPW,WAAwB,IAAvBjJ,EAAuBlB,UAAAO,OAAA,QAAAgP,IAAAvP,UAAA,GAAAA,UAAA,GAAf,GAAIwP,EAAWxP,UAAAO,OAAA,EAAAP,UAAA,QAAAuP,EACnC,OAAQC,EAAOzS,MACf,IAdwB,eAepB,OAAOyS,EAAOxS,QAClB,IAf0B,iBAgBtB,MAAO,GACX,QACI,OAAOkE,IUCXsF,QpBRW,WAAwB,IAAvBtF,EAAuBlB,UAAAO,OAAA,QAAAgP,IAAAvP,UAAA,GAAAA,UAAA,GAAf,GAAIwP,EAAWxP,UAAAO,OAAA,EAAAP,UAAA,QAAAuP,EACnC,OAAQC,EAAOzS,MACf,IAduB,cAenB,OAAOyS,EAAOxS,QAClB,IAfyB,gBAgBrB,MAAO,GACX,QACI,OAAOkE,IoBEX2I,UJTW,WAAwB,IAAvB3I,EAAuBlB,UAAAO,OAAA,QAAAgP,IAAAvP,UAAA,GAAAA,UAAA,GAAf,GAAIwP,EAAWxP,UAAAO,OAAA,EAAAP,UAAA,QAAAuP,EACnC,OAAQC,EAAOzS,MACf,IAdyB,gBAerB,OAAOyS,EAAOxS,QAClB,IAf2B,kBAgBvB,MAAO,GACX,QACI,OAAOkE,IIGXiK,MHLW,WAAkC,IAAjCjK,EAAiClB,UAAAO,OAAA,QAAAgP,IAAAvP,UAAA,GAAAA,UAAA,GAAzBoL,GAAcoE,EAAWxP,UAAAO,OAAA,EAAAP,UAAA,QAAAuP,EAC7C,OAAQC,EAAOzS,MACf,IAnBqB,YAoBjB,OAAOyS,EAAOxS,QAClB,IApBuB,cAqBnB,OAAOoO,GACX,QACI,OAAOlK,gBIpBAyO,gBAAYC,GAAUC,aAAgBC,OCOxCC,WAAb,SAAA7P,GAAA,SAAA6P,IAAA,IAAA5P,EAAAC,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAmB,KAAAgQ,GAAA,QAAAzP,EAAAN,UAAAO,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAV,UAAAU,GAAA,OAAAN,EAAAxB,OAAA+B,EAAA,EAAA/B,CAAAmB,MAAAI,EAAAvB,OAAAgC,EAAA,EAAAhC,CAAAmR,IAAAlP,KAAAf,MAAAK,EAAA,CAAAJ,MAAAtB,OAAA+B,MACIU,MAAQ,CACJ8O,eAAgB,EAChBC,gBAAiB,EACjBC,eAAe,GAJvB9P,EAsBE0O,mBAAqB,WACjB,MAAO,CACHlJ,UAAS,yBAAAnH,OAA2B2B,EAAKwB,MAAMmI,MAAM7I,MAAM1C,GAAlD,KACTzB,KAAM,UAzBhBqD,EA6BI+P,YAAc,SAAChP,GAAD,OAAU,WACpB,OAAQA,GACR,IAAK,YACDf,EAAK8B,SAAS,CACV8N,eAAgB5P,EAAKc,MAAM8O,eAAiB,IAEhD,MAEJ,IAAK,WACD5P,EAAK8B,SAAS,CACV+N,gBAAiB7P,EAAKc,MAAM+O,gBAAkB,OAvC9D7P,EA8CIgQ,cA9CJxR,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KA8CoB,SAAAC,IAAA,IAAAT,EAAA,OAAAM,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACZc,EAAK8B,SAAS,CAAEgO,eAAe,IAEvB1R,EAAO4B,EAAKwB,MAAM9E,QAAlB0B,GAHIY,EAAAE,KAAA,EAINc,EAAKsO,gBAJC,cAKZ5M,MAAM,UALM1C,EAAAE,KAAA,EAMNc,EAAKwB,MAAM+E,YAAYnI,GANjB,cAAAY,EAAAE,KAAA,EAONc,EAAKwB,MAAMyO,wBAAwB7R,GAP7B,OASZ4B,EAAK8B,SAAS,CAAEgO,eAAe,IATnB,yBAAA9Q,EAAAQ,SAAAX,MA9CpBmB,EA0DIsO,cA1DJ,eAAA1K,EAAApF,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KA0DoB,SAAAiF,EAAO8K,EAAWuB,GAAlB,IAAAvK,EAAAjJ,EAAAiN,EAAApM,EAAAuD,EAAAqP,EAAAtS,EAAA,OAAAa,EAAAC,EAAAI,KAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,cAAAyG,EACe3F,EAAKwB,MAAxB9E,EADIiJ,EACJjJ,QAASiN,EADLhE,EACKgE,MACXpM,EAASb,EAAQa,OACjBuD,EAAQ6I,EAAM7I,OAASvD,EAAOuD,MAChC6I,GAASA,EAAMH,YAAcmF,IACzBwB,GAAU,EACdxG,EAAMH,WAAWpF,IAAI,SAACvC,GAKlB,OAJIA,EAAKzD,KAAOuQ,EAAUvQ,KACtB+R,GAAU,EACVtO,EAAKD,MAAQ+M,EAAU/M,OAEpBC,IAENsO,GAASxG,EAAMH,WAAW4G,KAAKzB,IAGpCuB,IACAvG,EAAMF,UAAN,GAAApL,OAAAG,OAAA6Q,EAAA,EAAA7Q,CACOmL,EAAMF,WADb,CAEIyG,KAIFrS,EAAO,CACT2L,WAAaG,GAASA,EAAMH,YAAe,GAC3CC,UAAYE,GAASA,EAAMF,WAAc,GACzC4G,QAAUvP,GAASA,EAAM1C,IAAOuL,EAAM0G,SA1B9BvM,EAAA5E,KAAA,EA6BNc,EAAKwB,MAAM8E,YAAY5J,EAAQ0B,GAAIP,GA7B7B,cAAAiG,EAAA5E,KAAA,GA8BNc,EAAKwB,MAAM8O,cAAc5T,EAAQ0B,IA9B3B,yBAAA0F,EAAAtE,SAAAqE,MA1DpB,gBAAApE,EAAAsE,GAAA,OAAAH,EAAAlE,MAAAC,KAAAC,YAAA,GAAAI,EAAA,OAAAxB,OAAAwD,EAAA,EAAAxD,CAAAmR,EAAA7P,GAAAtB,OAAAyD,EAAA,EAAAzD,CAAAmR,EAAA,EAAAzN,IAAA,oBAAAN,MAAA,WAOyB,IACTlF,EAAYiD,KAAK6B,MAAjB9E,QAERiD,KAAK6B,MAAMyO,wBAAwBvT,EAAQ0B,MAVnD,CAAA8D,IAAA,4BAAAN,MAAA,SAa+B2O,GAAW,IAC1B5G,EAAU4G,EAAV5G,MAERhK,KAAKmC,SAAS,CACV8N,eAAgB,EAChBC,gBAAiBlG,EAAMF,WAAaE,EAAMF,UAAUtJ,OAAS,EAAIwJ,EAAMF,UAAUtJ,OAAS,MAlBtG,CAAA+B,IAAA,SAAAN,MAAA,WA2Fc,IAAAO,EAAAxC,KAAA6Q,EACyC7Q,KAAK6B,MAA5C9E,EADF8T,EACE9T,QAASiN,EADX6G,EACW7G,MAAOkB,EADlB2F,EACkB3F,QAASpB,EAD3B+G,EAC2B/G,UAC3BlM,EAAUb,GAAWA,EAAQa,QAAW,GACxCkT,EAAe9G,EAAM7I,OAASvD,EAAOuD,MACvC0I,EAAaG,EAAMH,YAAc,GACjCkH,EAAmB/G,EAAMF,WAAa,GALpC5I,EAOsClB,KAAKmB,MAAzC8O,EAPF/O,EAOE+O,eAAgBC,EAPlBhP,EAOkBgP,gBACpBtB,EAAc1D,EAAQ8F,OAAO,SAAAC,GAC7B,OAAQpH,EAAWqH,KAAK,SAAAlC,GAAS,OAAIA,EAAUvQ,KAAOwS,EAAYxS,OAItE,OAFAiB,QAAQC,IAAI,QAASoF,GAAMoM,YAGvB1O,EAAAzD,EAAA0D,cAAA,OAAK8B,UAAU,sBACX/B,EAAAzD,EAAA0D,cAACgF,EAAD,CAAiBhC,QAAS1F,KAAK+O,qBAC/BtM,EAAAzD,EAAA0D,cAAA,MAAI8B,UAAU,kBAAd,2GACA/B,EAAAzD,EAAA0D,cAAA,0BACmB9E,EAAO+J,aAEzBmJ,GACArO,EAAAzD,EAAA0D,cAAA,WACID,EAAAzD,EAAA0D,cAAA,8GACAD,EAAAzD,EAAA0D,cAAA,wBAAgBoO,EAAa1P,MAC7BqB,EAAAzD,EAAA0D,cAAA,wBACkBoO,EAAalH,aAEF,IAA5BmH,EAAiBvQ,QAAgBiC,EAAAzD,EAAA0D,cAAA,oEACjCqO,GAAoBA,EAAiBtM,IAAI,SAAA8L,GAAU,OAChD9N,EAAAzD,EAAA0D,cAAA,KAAGH,IAAKgO,GACHzG,EAAUwC,KAAK,SAAA8E,GAAQ,OAAIA,EAAS3S,KAAO8R,IAAYnP,SAKrEqB,EAAAzD,EAAA0D,cAAC2O,GAAA,EAAD,CAASC,QAAM,IACdzH,GAAcA,EAAWpF,IAAI,SAAAuK,GAAS,OACnCvM,EAAAzD,EAAA0D,cAAC6O,GAAD,CACIhP,IAAKyM,EAAUvQ,GACf0G,UAAWpI,EAAQ0B,GACnB+S,SAAU5T,EAAOa,GACjBkQ,cAAenM,EAAKmM,cACpBC,YAAa,CAACI,GACdA,UAAWA,MAIlBJ,GAAe,IAAIlO,MAAMuP,GAAgBwB,MAAK,GAAMhN,IAAI,SAACiN,EAAIC,GAAL,OACrDlP,EAAAzD,EAAA0D,cAAA,OAAK8B,UAAU,4BAA4BjC,IAAKoP,GAC3CA,IAAU1B,EAAiB,GAC5BxN,EAAAzD,EAAA0D,cAAC0D,EAAA,EAAD,CACIhF,KAAK,cACLmJ,MAAM,QACN4D,KAAK,QACL3J,UAAU,mBACVX,QAASrB,EAAK4N,YAAY,eAG9B3N,EAAAzD,EAAA0D,cAAC6O,GAAD,CACI/M,UAAWmN,EAAQ1B,EAAiB,EAAI,6BAA+B,GACvE9K,UAAWpI,EAAQ0B,GACnB+S,SAAU5T,EAAOa,GACjBkQ,cAAenM,EAAKmM,cACpBC,YAAaA,OAIzBnM,EAAAzD,EAAA0D,cAAC2O,GAAA,EAAD,CAASC,QAAM,IACdxH,EAAUtJ,OAAS,GAAK,IAAIE,MAAMwP,GAAiBuB,MAAK,GAAMhN,IAAI,SAACiN,EAAIC,GAAL,OAC/DlP,EAAAzD,EAAA0D,cAAA,OAAK8B,UAAU,4BAA4BjC,IAAKoP,GAC3CA,IAAUzB,EAAkB,GAC7BzN,EAAAzD,EAAA0D,cAAC0D,EAAA,EAAD,CACIhF,KAAK,cACLmJ,MAAM,QACN4D,KAAK,QACL3J,UAAU,mBACVX,QAASrB,EAAK4N,YAAY,cAG9B3N,EAAAzD,EAAA0D,cAAC2M,GAAA,EAAD,CACIC,YAAY,yDACZJ,QAASpF,EAAUrF,IAAI,SAAA2M,GAAQ,MAAK,CAChCnP,MAAOmP,EAAS3S,GAChB8D,IAAK6O,EAAS3S,GACd8G,KAAM6L,EAAShQ,QAEnBa,MAAO8O,EAAiBY,GAASZ,EAAiBY,QAASnC,EAC3DnM,SAAU,SAACmD,EAAGoL,GAAJ,OAAepP,EAAKmM,mBAAca,EAAWoC,EAAO3P,UAEjE8O,EAAiBY,IAAUlP,EAAAzD,EAAA0D,cAACgF,EAAD,CACxB9C,MAAO,CAAEqB,SAAU,YACnBP,QAAS,iBAAO,CAAEG,UAAS,qBAAAnH,OAAuBqS,EAAiBY,GAAxC,KAAmD3U,KAAM,kBAIhGyF,EAAAzD,EAAA0D,cAAA,WACAD,EAAAzD,EAAA0D,cAACG,EAAA,EAAD,CAAQ7F,KAAK,SAAS6U,OAAK,EAACnO,UAAQ,EAACG,QAAS7D,KAAKqQ,cAAeyB,SAAU9R,KAAKmB,MAAMgP,eAAvF,gHA3LhBH,EAAA,CAA0ClM,IAAMC,YAmMnCgO,GAAc/N,YACvB,SAAAe,GAAK,MAAK,CACNiF,MAAOjF,EAAMiF,MACbkB,QAASnG,EAAMmG,QACfnO,QAASgI,EAAMhI,QACf+M,UAAW/E,EAAM+E,YAErB,CACIpD,SAAUsL,GACVC,WAAYD,GACZpL,YblMc,SAACnI,EAAIuL,GACvB,sBAAAkI,EAAArT,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAkT,EAAMhT,GAAN,OAAAJ,EAAAC,EAAAI,KAAA,SAAAgT,GAAA,cAAAA,EAAA9S,KAAA8S,EAAA7S,MAAA,cAAA6S,EAAA7S,KAAA,EACGC,EAAoBf,GADvB,wBAAA2T,EAAAvS,SAAAsS,MAAP,gBAAAE,GAAA,OAAAH,EAAAnS,MAAAC,KAAAC,YAAA,IakMI0G,YAAaqL,GACbrB,cAAe2B,GACfC,WAAYC,IAbOxO,CAezBgM,IC/MWyC,WAAb,SAAAtS,GAAA,SAAAsS,IAAA,IAAArS,EAAAC,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAmB,KAAAyS,GAAA,QAAAlS,EAAAN,UAAAO,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAV,UAAAU,GAAA,OAAAN,EAAAxB,OAAA+B,EAAA,EAAA/B,CAAAmB,MAAAI,EAAAvB,OAAAgC,EAAA,EAAAhC,CAAA4T,IAAA3R,KAAAf,MAAAK,EAAA,CAAAJ,MAAAtB,OAAA+B,MAcI6P,wBAdJ,eAAA1R,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAc8B,SAAAC,EAAOiG,GAAP,IAAAuN,EAAA/Q,EAAA,OAAA5C,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAChBc,EAAKwB,MAAM6G,WAAWvD,GADN,cAAA9F,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIZc,EAAKwB,MAAM6E,SAASvB,GAJR,OAAA9F,EAAAE,KAAA,uBAAAF,EAAAC,KAAA,EAAAD,EAAAsT,GAAAtT,EAAA,SAMZqT,EAAgB,CAClBhC,QAASrQ,EAAKwB,MAAMjE,OAAOuD,MAAM1C,GACjCqL,UAAW,GACXD,WAAY,IATExK,EAAAE,KAAA,GAWZc,EAAKwB,MAAM8E,YAAYxB,EAAWuN,GAXtB,eAAArT,EAAAE,KAAA,GAchBc,EAAKwB,MAAM0Q,WAAWpN,GAdN,eAAA9F,EAAAE,KAAA,GAehBc,EAAKwB,MAAM8O,cAAcxL,GAfT,eAiBhBxD,EAAYtB,EAAKwB,MAAMuI,SAASkC,KAAK,SAAApB,GAAO,OAAIA,EAAQ9J,OAASf,EAAKwB,MAAM+Q,cAAanU,GAjBzEY,EAAAE,KAAA,GAmBhBc,EAAKwB,MAAMgF,aAAalF,GAnBR,eAAAtC,EAAAE,KAAA,GAoBhBc,EAAKwB,MAAMiF,SAASnF,GApBJ,QAsBtBjC,QAAQC,IAAI,QAASU,EAAKwB,MAAMmI,OAChCtK,QAAQC,IAAI,kBAAmBU,EAAKwB,MAAMqJ,SAvBpB,yBAAA7L,EAAAQ,SAAAX,EAAA,iBAd9B,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,GAAAI,EAwCI4K,aAAe,SAAC9J,GACZd,EAAKwB,MAAMgR,YAAY1R,IAzC/Bd,EA4CIyS,gBAAkB,WACd,MAAO,CACHjN,UAAS,yBAAAnH,OAA2B2B,EAAKwB,MAAMjE,OAAOuD,MAAM1C,GAAnD,KACTzB,KAAM,UA/ClBqD,EAAA,OAAAxB,OAAAwD,EAAA,EAAAxD,CAAA4T,EAAAtS,GAAAtB,OAAAyD,EAAA,EAAAzD,CAAA4T,EAAA,EAAAlQ,IAAA,oBAAAN,MAAA,WAEQjC,KAAK6B,MAAMkR,gBAFnB,CAAAxQ,IAAA,4BAAAN,MAAA,eAAA+Q,EAAAnU,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAA,SAAAiF,EAKqC0M,GALrC,IAAAzL,EAAAvH,EAAA,OAAAmB,EAAAC,EAAAI,KAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,UAMgB4F,EAAsByL,EAAtBzL,YAAWvH,EAAWgT,EAAXhT,UAELoC,KAAK6B,MAAMjE,QAAUA,EAAOuD,MAAM1C,KAAOuB,KAAK6B,MAAMjE,OAAOuD,MAAM1C,GARvF,CAAA0F,EAAA5E,KAAA,eAAA4E,EAAA8F,OAAA,wBAAA9F,EAAA5E,KAAA,EAWcS,KAAKsQ,wBAAwBnL,GAX3C,wBAAAhB,EAAAtE,SAAAqE,EAAAlE,SAAA,gBAAAoE,GAAA,OAAA4O,EAAAjT,MAAAC,KAAAC,YAAA,KAAAsC,IAAA,SAAAN,MAAA,WAmDc,IAAAO,EAAAxC,KAAAgG,EACyBhG,KAAK6B,MAA5BjE,EADFoI,EACEpI,OAAQ+R,EADV3J,EACU2J,WAEhB,OACIlN,EAAAzD,EAAA0D,cAACD,EAAAzD,EAAMiU,SAAP,KACKrV,GAAW6E,EAAAzD,EAAA0D,cAAA,WAAS8B,UAAU,UAC3B/B,EAAAzD,EAAA0D,cAAA,OAAK8B,UAAU,gCACX/B,EAAAzD,EAAA0D,cAACwQ,GAAD,CAAa5C,wBAAyBtQ,KAAKsQ,0BAC3C7N,EAAAzD,EAAA0D,cAACyQ,GAAD,OAEHxD,EAAWnP,OAASiC,EAAAzD,EAAA0D,cAAA,OAAK8B,UAAU,+BAChC/B,EAAAzD,EAAA0D,cAAA,OAAK8B,UAAU,eACVmL,EAAWlL,IAAI,SAAA2O,GAAS,OACrB3Q,EAAAzD,EAAA0D,cAAC2Q,GAADxU,OAAAyU,OAAA,CAAW/Q,IAAK6Q,EAAUjS,MAAM1C,GAAIwM,aAAczI,EAAKyI,cAAkBmI,QAG5E,WAnE7BX,EAAA,CAAqC3O,IAAMC,YA2E9BwP,GAASvP,YAClB,SAAAe,GAAK,MAAK,CACN4K,WAAY5K,EAAM4K,WAClB3F,MAAOjF,EAAMiF,MACb7E,UAAWJ,EAAMhI,QAAQ0B,GACzBmU,YAAa7N,EAAMhI,QAAQ6V,YAC3BhV,OAAQmH,EAAMhI,QAAQa,OACtBwM,SAAUrF,EAAMqF,WAEpB,CACI1D,SAAUsL,GACVrL,YAAaqL,GACbC,WAAYD,GACZa,YdpEmB,SAAC1R,GACxB,OAAO,SAAAhC,GACHA,EDvBmB,SAACgC,GAAD,MAAY,CACnCnE,KAZ8B,qBAa9BC,QAASkE,GCqBIvB,CAA2BuB,McmEpC4R,YCpGW,WACf,sBAAAnU,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAOC,GAAP,IAAAiL,EAAA,OAAArL,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EvBeApC,EAAI,auBfJ,cACGiN,EADH/K,EAAAI,KAGHC,QAAQC,IAAI,eAAgByK,GAE5BjL,EAAS6F,GAAmBoF,IALzB/K,EAAA4K,OAAA,SAOIG,GAPJ,wBAAA/K,EAAAQ,SAAAX,MAAP,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,IDoGIsS,WAAYC,GACZ7B,cAAe2B,GACf5J,WAAYW,EACZxC,aExGW,SAAClF,GAChB,sBAAA/C,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAOC,GAAP,IAAA2K,EAAA,OAAA/K,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACqBC,EAAqBmC,GAD1C,cACGmI,EADHzK,EAAAI,KAGHC,QAAQC,IAAI,gBAAiBmK,GAE7B3K,EAAS6F,GAAmB8E,IALzBzK,EAAA4K,OAAA,SAOIH,GAPJ,wBAAAzK,EAAAQ,SAAAX,MAAP,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,IFwGI6G,SGzGW,SAACnF,GAChB,sBAAA/C,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAOC,GAAP,IAAAiM,EAAA,OAAArM,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACiBC,EAAiBmC,GADlC,cACGyJ,EADH/L,EAAAI,KAGHN,EAAS6F,GAAmBoG,IAHzB/L,EAAA4K,OAAA,SAKImB,GALJ,wBAAA/L,EAAAQ,SAAAX,MAAP,gBAAAY,GAAA,OAAAlB,EAAAmB,MAAAC,KAAAC,YAAA,KHqFkB+D,CAqBpByO,IIvGWe,GAAe,CACxB,CACIpS,KAAM,mDACNiH,KAAM,YACNU,UAAWjE,GAEf,CACIuD,KAAM,sBACNU,UAAWK,KAINjB,GAAgB,CACzB,CACI/G,KAAM,0GACNiH,KAAM,QACNU,UAAWwK,IAEf,CACInS,KAAM,oGACNiH,KAAM,UACNU,UAAWgB,IAEf,CACI3I,KAAM,6CACNiH,KAAM,UACNU,UAAWlB,IAEf,CACIzG,KAAM,+DACNiH,KAAM,OACNU,UAAWlB,IAEf,CACIzG,KAAM,+DACNiH,KAAM,eACNU,UAAWW,KAINZ,GAASX,GAAc1D,IAAI,SAAA2D,GAAK,OAAAvJ,OAAAyP,EAAA,EAAAzP,CAAA,GACtCuJ,EADsC,CAEzCC,KAAI,uBAAA3J,OAAyB0J,EAAMC,UC5C1BvF,GAAS,WAClB,OACIL,EAAAzD,EAAA0D,cAACsF,EAAA,EAAD,CAAMyL,SAAS,OACVD,GAAaxC,OAAO,SAAA5I,GAAK,OAAIA,EAAMhH,OAAMqD,IAAI,SAAA2D,GAAK,OAC/C3F,EAAAzD,EAAA0D,cAACgC,EAAA,EAAD,CAAMC,GAAIyD,EAAMC,KAAM9F,IAAK6F,EAAMhH,MAC7BqB,EAAAzD,EAAA0D,cAACsF,EAAA,EAAKO,KAAN,CAAWC,GAAI,KACXpH,KAAMgH,EAAMhH,0BCHpCsS,IAASC,OACLlR,EAAAzD,EAAA0D,cAACkR,EAAA,EAAD,CAAU7O,MAAOA,IACbtC,EAAAzD,EAAA0D,cAACgC,EAAA,EAAD,KACIjC,EAAAzD,EAAA0D,cCJO,kBACfD,EAAAzD,EAAA0D,cAAA,OAAK8B,UAAU,OACX/B,EAAAzD,EAAA0D,cAACmR,GAAD,MACApR,EAAAzD,EAAA0D,cAAA,QAAM8B,UAAW,QACb/B,EAAAzD,EAAA0D,cAACmG,EAAA,EAAD,KACIpG,EAAAzD,EAAA0D,cAACmG,EAAA,EAAD,CAAOiL,OAAK,EAACzL,KAAK,IAAIU,UAAWjE,IAChC0O,GAAa/O,IAAI,SAAA2D,GAAK,OACnB3F,EAAAzD,EAAA0D,cAACmG,EAAA,EAAD,CAAOR,KAAMD,EAAMC,KAAMU,UAAWX,EAAMW,UAAWxG,IAAK6F,EAAMC,aDHxE,QAGRkE,SAASwH,eAAe","file":"static/js/main.f6d9a540.chunk.js","sourcesContent":["export const PATIENT_PUT = 'patient/put';\nexport const PATIENT_CLEAR = 'patient/clear';\n\nexport const put = patient => ({\n    type: PATIENT_PUT,\n    payload: patient\n});\n\nexport const clear = () => ({\n    type: PATIENT_CLEAR\n});\n\nexport default (state = {}, action) => {\n    switch (action.type) {\n    case PATIENT_PUT:\n        return action.payload;\n    case PATIENT_CLEAR:\n        return {};\n    default:\n        return state;\n    }\n};\n","const baseUrl = 'http://188.242.178.146:8080';\n\nexport function get (url) {\n    const params = {\n        mode: 'cors',\n        headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        }\n    };\n\n    return fetch(baseUrl + url, params).then(response => {\n        if (response.status >= 200 && response.status < 300) {\n            return response.json();\n        } else {\n            return Promise.reject(response.statusText);\n        }\n    });\n}\n\nexport function post (url, data) {\n    const params = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(baseUrl + url, params);\n}\n\nexport function put (url, data) {\n    const params = {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify(data)\n    };\n\n    return fetch(baseUrl + url, params);\n}\n","import { get, post } from './fetchService';\n\nexport function getPatients () {\n    return get('/patients');\n}\n\nexport function getPatientById (id) {\n    return get(`/patients/${id}`);\n}\n\nexport function createPatient (data) {\n    return post('/patients', data);\n}\n","import * as actionCreators from '../reducers/patient';\nimport * as service from '../../Services/patientService';\n\nexport const get = (id) => {\n    return async dispatch => {\n        const patient = await service.getPatientById(id);\n\n        console.log('GOT PATIENT', patient);\n\n        dispatch(actionCreators.put(patient));\n    };\n};\n\nexport const create = (data) => {\n    return async dispatch => {\n        await service.createPatient(data);\n\n        // TODO: maybe dispatch something??\n    };\n};\n\nexport const clear = () => dispatch => dispatch(actionCreators.clear());\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, Button, Form, Input } from 'semantic-ui-react';\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\nimport * as patientThunks from '../../redux/thunks/patient';\n\nconst genderOptions = [\n    { key: 'm', text: 'Male', value: 'male' },\n    { key: 'f', text: 'Female', value: 'female' }\n];\n\nexport class NewPatientForm extends React.Component {\n    savePatient = (event) => {\n        event.preventDefault();\n        const { name, birthDate } = this.state;\n        const data = new FormData(event.target);\n        const patientData = {\n            name: name,\n            birthDate: birthDate.toISOString().substring(0, 10),\n            diseaseId: 1,\n            doctorId: 1\n        };\n\n        this.props.create(patientData);\n        alert('created');\n    };\n\n    handleOnChange = (value, attr) => this.setState({ [attr]: value });\n\n    render () {\n        return (\n            <Modal trigger={<Button>Add patient</Button>}>\n                <Modal.Header>Add new patient</Modal.Header>\n                <Modal.Content>\n                    <Form>\n                        <Form.Field label=\"Name\" type=\"text\" control={Input}\n                            onChange={(event) => this.handleOnChange(event.target.value, 'name')}/>\n                        {/* <Form.Field label=\"Gender\" control={Select} options={genderOptions} */}\n                        {/* onChange={(event) => this.handleOnChange(event, 'gender')}/> */}\n                        <Form.Field>\n                            <label>Age</label>\n                            <SemanticDatepicker onDateChange={(date) => this.handleOnChange(date, 'birthDate')}/>\n                        </Form.Field>\n                    </Form>\n                </Modal.Content>\n                < Modal.Actions>\n                    < Button\n                        positive\n                        icon='checkmark'\n                        content=\"Save\"\n                        type='submit'\n                        onClick={this.savePatient\n                        }\n                    />\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n}\n\nexport default connect(\n    null,\n    {\n        create: patientThunks.create\n    }\n)(NewPatientForm);\n","export const PATIENTS_PUT = 'patients/put';\nexport const PATIENTS_CLEAR = 'patients/clear';\n\nexport const put = patients => ({\n    type: PATIENTS_PUT,\n    payload: patients\n});\n\nexport const clear = () => ({\n    type: PATIENTS_CLEAR\n});\n\nexport default (state = [], action) => {\n    switch (action.type) {\n    case PATIENTS_PUT:\n        return action.payload;\n    case PATIENTS_CLEAR:\n        return [];\n    default:\n        return state;\n    }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport NewPatientForm from '../NewPatientFormModal/NewPatientFormModal';\nimport * as patientsThunks from '../../redux/thunks/patients';\nimport { NavLink } from 'react-router-dom';\n\nclass PatientsListContainer extends React.Component {\n    componentDidMount () {\n        this.props.getPatients();\n    }\n\n    render () {\n        const { patients } = this.props;\n\n        return (\n            <section className={'PatientsList'}>\n                <h2>Patients</h2>\n                <ul className={'PatientsList-List'}>\n                    {patients.map(patient => {\n                        return (\n                            <NavLink to={`/patient/${patient.id}/info`} key={patient.id}>\n                                <li\n                                    className={'PatientsList-Item'}\n                                    style={{ cursor: 'pointer' }}>\n                                    {patient.name} ({patient.birthDate})\n                                </li>\n                            </NavLink>\n                        );\n                    })}\n                </ul>\n            </section>\n        );\n    }\n}\n\nexport const PatientsList = connect(\n    store => ({\n        patients: store.patients || []\n    }),\n    {\n        getPatients: patientsThunks.get\n    }\n)(PatientsListContainer);\n","import * as actionCreaters from '../reducers/patients';\nimport * as service from '../../Services/patientService';\n\nexport const get = () => {\n    return async dispatch => {\n        const patients = await service.getPatients();\n\n        dispatch(actionCreaters.put(patients));\n    };\n};\n\nexport const clear = () => dispatch => dispatch(actionCreaters.clear());\n","export const ASSOCIATIONS_PUT = 'associations/put';\nexport const ASSOCIATIONS_CLEAR = 'associations/clear';\nexport const ASSOCIATIONS_ADD = 'associations/add';\n\nexport const put = associations => ({\n    type: ASSOCIATIONS_PUT,\n    payload: associations\n});\n\nexport const clear = () => ({\n    type: ASSOCIATIONS_CLEAR\n});\n\nexport const add = association => ({\n    type: ASSOCIATIONS_ADD,\n    payload: association\n});\n\nexport default (state = [], action) => {\n    switch (action.type) {\n    case ASSOCIATIONS_PUT:\n        return action.payload;\n    case ASSOCIATIONS_CLEAR:\n        return [];\n    case ASSOCIATIONS_ADD:\n        return [\n            ...state,\n            action.payload\n        ];\n    default:\n        return state;\n    }\n};\n","import { get, post } from './fetchService';\n\nexport function getAssociations (patientId) {\n    return get(`/associations?patientId=${patientId}`);\n}\n\nexport function createAssociation (data) {\n    return post(`/associations/1`, data);\n}\n","import * as actionCreators from '../reducers/associations';\nimport * as service from '../../Services/associationService';\n\nexport const get = (patientId) => {\n    return async dispatch => {\n        const associations = await service.getAssociations(patientId);\n        console.log('GET Associations', associations);\n\n        dispatch(actionCreators.put(associations));\n    };\n};\n\nexport const create = data => {\n    return async dispatch => {\n        await service.createAssociation(data);\n\n        data.type = data.associationType;\n        delete data.associationType;\n\n        dispatch(actionCreators.add(data));\n    };\n};\n\nexport const clear = () => dispatch => dispatch(actionCreators.clear());\n","import React, { Component } from 'react';\nimport { Button, Form, Icon, Modal, TextArea } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport './AssociationForm.css';\nimport * as associationsThunks from '../../redux/thunks/associations';\n\nexport class AssociationForm extends Component {\n  state = {\n      text: '',\n      showModal: false\n  };\n\n  onSubmit = () => {\n      if (typeof this.props.getData !== 'function') {\n          console.warn('getData method is not provided');\n      }\n\n      const { predicate, type } = this.props.getData();\n      const text = this.state.text;\n\n      this.props.create({\n          predicate,\n          text,\n          associationType: type\n      });\n\n      this.closeModal();\n  };\n\n  closeModal = () => {\n      this.setState({ showModal: false });\n  };\n\n  render () {\n      const { position, style = {} } = this.props;\n      const { text, showModal } = this.state;\n\n      let iconClassName = 'AssociationForm__Icon';\n\n      switch (position) {\n      case 'right':\n          iconClassName += ' AssociationForm__Icon--right';\n          break;\n      default:\n          iconClassName += ' AssociationForm__Icon--left';\n      }\n\n      return (\n          <Modal\n              trigger={\n                  <span onClick={() => { this.setState({ showModal: true }); }}>\n                      <Icon name='sticky note outline' className={iconClassName} style={style} />\n                  </span>\n              }\n\n              open={showModal}\n              onClose={this.closeModal}\n          >\n              <Modal.Header>Add association</Modal.Header>\n              <Modal.Content>\n                  <Form>\n                      <Form.Field control={TextArea} value={text} onChange={(e) => { this.setState({ text: e.target.value }); }} />\n                  </Form>\n              </Modal.Content>\n              <Modal.Actions>\n                  <Button positive icon='checkmark' content=\"Save\" onClick={this.onSubmit} />\n              </Modal.Actions>\n          </Modal>\n      );\n  }\n}\n\nexport default connect(\n    null,\n    {\n        create: associationsThunks.create\n    }\n)(AssociationForm);\n","export const HISTORY_PUT = 'history/put';\nexport const HISTORY_CLEAR = 'history/clear';\n\nexport const put = history => ({\n    type: HISTORY_PUT,\n    payload: history\n});\n\nexport const clear = () => ({\n    type: HISTORY_CLEAR\n});\n\nexport default (state = [], action) => {\n    switch (action.type) {\n    case HISTORY_PUT:\n        return action.payload;\n    case HISTORY_CLEAR:\n        return [];\n    default:\n        return state;\n    }\n};\n","import { get, post, put } from './fetchService';\n\nexport function getDraft (id) {\n    return get(`/patients/${id}/status/draft`);\n}\n\nexport function createDraft (id, data) {\n    return put(`/patients/${id}/status/draft`, data);\n}\n\nexport function commitDraft (id) {\n    return post(`/patients/${id}/status/draft`);\n}\n// TODO: Переместить\nexport function getDiseaseData (id) {\n    return get(`/patients/${id}/status/attributes`);\n}\n\nexport const getDiseases = () => {\n    return get('/diseases');\n};\n\nexport const getMedicines = (diseaseId) => {\n    return get(`/diseases/${diseaseId}/medicine`);\n};\n\nexport function getHistory (id) {\n    return get(`/patients/${id}/statuses`);\n}\n\nexport function getNextStates (id) {\n    return get(`/patients/${id}/status/draft/states`);\n}\n\nexport const getGraph = (diseaseId) => {\n    return get(`/diseases/${diseaseId}/states`);\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport AssociationForm from '../AssociationForm/AssociationForm';\nimport * as historyThunks from '../../redux/thunks/history';\nimport { Loader } from 'semantic-ui-react';\nimport './PatientInfo.css';\n\nclass PatientInfoContainer extends React.Component {\n    componentDidMount () {\n        const { patient, getHistory } = this.props;\n        getHistory(patient.id);\n    }\n\n    render () {\n        const { name, birthDate } = this.props.patient;\n        const { history } = this.props;\n\n        const dateObj = new Date(birthDate);\n        const year = dateObj.getFullYear();\n        const month = dateObj.getMonth();\n        const now = new Date();\n\n        const age = now.getFullYear() - year + (now.getMonth() - month < 0 ? 1 : 0);\n\n        return (\n            <aside className=\"PatientInfo\">\n                <section className=\"PatientInfo-Name\">\n                    <h2>{name}</h2>\n                </section>\n                <section className=\"PatientInfo-Description\">\n                    <h3>Info</h3>\n                    <div>\n                        <div style={{ position: 'relative' }}>\n                            <AssociationForm position='right' getData={() => ({ predicate: `eq({patient.age}, ${age})`, type: 'patient' })} />\n                            <p>Birth date: {birthDate}</p>\n                        </div>\n                        {/* <p>Gender: {gender}</p> */}\n                    </div>\n                </section>\n                <section className=\"PatientInfo-History\">\n                    <h3>History</h3>\n                    {history ? history.map(event =>\n                        <div key={event.id}>\n                            <p>date:{event.submittedOn}</p>\n                            <p>name:{event.state.name}</p>\n                            <br/>\n                        </div>) : <Loader/>\n                    }\n                </section>\n            </aside>\n        );\n    }\n}\n\nexport const PatientInfo = connect(\n    store => ({\n        patient: store.patient,\n        history: store.history\n    }),\n    {\n        getHistory: historyThunks.get\n    }\n)(PatientInfoContainer);\n","import * as actionCreaters from '../reducers/history';\nimport * as service from '../../Services/draftService';\n\nexport const get = (patientId) => {\n    return async (dispatch) => {\n        const history = await service.getHistory(patientId);\n        console.log('GET HISTORY', history);\n        dispatch(actionCreaters.put(history));\n    };\n};\n\nexport const clear = () => {\n    return dispatch => dispatch(actionCreaters.clear());\n};\n","import * as React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport { NavLink } from 'react-router-dom';\nimport { sidebarRoutes } from '../../constants';\nimport './Sidebar.css';\n\nexport const SideBar = () => {\n    return (\n        <aside className={'Sidebar'}>\n            <Menu pointing vertical>\n                {sidebarRoutes.map(route => (\n                    <NavLink to={route.path} key={route.name} activeClassName={'Sidebar-Link_active'}>\n                        <Menu.Item as={'li'}\n                            name={route.name}\n                        />\n                    </NavLink>\n                ))}\n            </Menu>\n        </aside>\n    );\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { SideBar } from '../Sidebar/Sidebar';\nimport { routes } from '../../constants';\nimport { connect } from 'react-redux';\nimport { Dimmer, Loader } from 'semantic-ui-react';\nimport * as patientThunks from '../../redux/thunks/patient';\nimport './Patient.css';\n\nclass PatientContainer extends React.PureComponent {\n    componentDidMount () {\n        this.props.getPatient(this.props.match.params.patientId);\n    }\n\n    render () {\n        if (!this.props.patient.id) {\n            return (\n                <Dimmer active inverted>\n                    <Loader inverted/>\n                </Dimmer>\n            );\n        }\n        return (\n            <section className=\"Patient\">\n                <SideBar/>\n                <div className={'Patient-Main'}>\n                    <Switch>\n                        {routes.map(route =>\n                            <Route path={route.path} component={route.component} key={route.path}/>)}\n                    </Switch>\n                </div>\n            </section>);\n    }\n};\n\nexport const Patient = connect(\n    store => ({\n        patient: store.patient\n    }),\n    {\n        getPatient: patientThunks.get\n    }\n)(PatientContainer);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as associationsThunks from '../../redux/thunks/associations';\n\nexport class AssociationsContainer extends React.PureComponent {\n    async componentDidMount () {\n        await this.props.getAssociations(this.props.patientId);\n    }\n\n    render () {\n        const { associations } = this.props;\n\n        return (\n            <div className='States-Draft'>\n                <h2>Ассоциации</h2>\n                {associations.map(association => {\n                    return (\n                        <div key={association.id}>\n                            <p><b>{association.type}: </b>{association.text}</p>\n                        </div>\n                    );\n                })}\n            </div>\n        );\n    }\n}\n\nexport const Associations = connect(\n    store => ({\n        associations: store.associations,\n        patientId: store.patient.id\n    }),\n    {\n        getAssociations: associationsThunks.get\n    }\n)(AssociationsContainer);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass CurrentStateContainer extends React.PureComponent {\n    render () {\n        const { status } = this.props.patient;\n        const { state } = status;\n        return (\n            <section className=\"CurrentState\">\n                <h2>Текущее состояние</h2>\n                <h3>{state.name}</h3>\n                <div>\n                    <h4>Описание</h4>\n                    <p>{state.description}</p>\n                </div>\n                <div>\n                    <h4>Анализы</h4>\n                    <ul>\n                        {status.attributes.length ? status.attributes.map(attr =>\n                            <li key={attr.name}>{JSON.stringify(attr)}</li>)\n                            : 'ничего не назначено'}\n                    </ul>\n                </div>\n                <div>\n                    <h4>Лекарства</h4>\n                    <ul>\n                        {status.medicines.length ? status.medicines.map(attr =>\n                            <li key={attr.name}>{JSON.stringify(attr)}</li>)\n                            : 'ничего не прописано'}\n                    </ul>\n                </div>\n            </section>);\n    }\n};\n\nexport const CurrentState = connect(\n    store => ({\n        patient: store.patient\n    })\n)(CurrentStateContainer);\n","export const DRAFT_PUT = 'draft/put';\nexport const DRAFT_CLEAR = 'draft/clear';\nexport const DRAFT_UPDATE_STATE = 'draft/update-state';\n\nexport const put = draft => ({\n    type: DRAFT_PUT,\n    payload: draft\n});\n\nexport const clear = () => ({\n    type: DRAFT_CLEAR\n});\n\nexport const updateState = (state) => ({\n    type: DRAFT_UPDATE_STATE,\n    payload: state\n});\n\nexport default (state = {}, action) => {\n    switch (action.type) {\n    case DRAFT_PUT:\n        return action.payload;\n    case DRAFT_CLEAR:\n        return {};\n    case DRAFT_UPDATE_STATE:\n\n        return {\n            ...state,\n            state: action.payload\n        };\n    default:\n        return state;\n    }\n};\n","import * as service from '../../Services/draftService';\nimport * as actionCreators from '../reducers/draft';\n\nexport const get = (id) => {\n    return async (dispatch) => {\n        const draft = await service.getDraft(id);\n        console.log('GET DRAFT DATA', draft);\n        dispatch(actionCreators.put(draft));\n\n        return draft;\n    };\n};\n\nexport const create = (id, draft) => {\n    return async (dispatch) => {\n        const result = await service.createDraft(id, draft);\n\n        console.log('CREATE DRAFT', result);\n        dispatch(actionCreators.put(draft));\n    };\n};\n\nexport const commit = (id, draft) => {\n    return async dispatch => {\n        await service.commitDraft(id, draft);\n    };\n};\n\nexport const clear = () => {\n    return dispatch => {\n        dispatch(actionCreators.clear());\n    };\n};\n\nexport const updateState = (state) => {\n    return dispatch => {\n        dispatch(actionCreators.updateState(state));\n    };\n};\n","export const DISEASES_PUT = 'diseases/put';\nexport const DISEASES_CLEAR = 'diseases/clear';\n\nexport const put = diseases => ({\n    type: DISEASES_PUT,\n    payload: diseases\n});\n\nexport const clear = () => ({\n    type: DISEASES_CLEAR\n});\n\nexport default (state = [], action) => {\n    switch (action.type) {\n    case DISEASES_PUT:\n        return action.payload;\n    case DISEASES_CLEAR:\n        return [];\n    default:\n        return state;\n    }\n};\n","import React from 'react';\nimport { Button, Label } from 'semantic-ui-react';\nimport './NextState.css';\nimport AssociationForm from '../AssociationForm/AssociationForm';\n\nfunction getLabel (recommended) {\n    if (recommended === null) {\n        return {\n            color: 'orange',\n            text: 'недостаточно информации'\n        };\n    } if (!recommended) {\n        return {\n            color: 'red',\n            text: 'не рекомендуется'\n        };\n    }\n    return {\n        color: 'green',\n        text: 'рекомендуется'\n    };\n}\nexport const NextState = (props) => (\n    <div className=\"States-NextState NextState\">\n        <AssociationForm position='right' getData={() => ({ predicate: `eq({status.state.id}, ${props.id})`, type: 'state' })} />\n        <Label className=\"NextState-Label\"\n            color={getLabel(props.recommended).color} tag>\n            {getLabel(props.recommended).text}\n        </Label>\n        <div className=\"NextState-Content\">\n            <h3 className='States-Heading'>\n                {props.state.name}\n            </h3>\n            <p>description: {props.state.description}</p>\n            {props.errors && <div>\n                errors:\n                {props.errors.map((error, i) =>\n                    <p key={i}>code: {error.code}, reason: {error.reason}</p>\n                )}\n            </div>\n            }\n            <Button className=\"NextState-Button\" basic color='teal'\n                onClick={() => props.confirmState(props.state)}>Confirm</Button>\n        </div>\n    </div>\n);\n","export const DISEASE_PUT = 'disease/put';\nexport const DISEASE_CLEAR = 'disease/clear';\n\nexport const put = disease => ({\n    type: DISEASE_PUT,\n    payload: disease\n});\n\nexport const clear = () => ({\n    type: DISEASE_CLEAR\n});\n\nexport default (state = [], action) => {\n    switch (action.type) {\n    case DISEASE_PUT:\n        return action.payload;\n    case DISEASE_CLEAR:\n        return [];\n    default:\n        return state;\n    }\n};\n","import * as actionCreaters from '../reducers/disease';\nimport * as service from '../../Services/draftService';\n\nexport const get = (patientId) => {\n    return async (dispatch) => {\n        const disease = await service.getDiseaseData(patientId);\n\n        console.log('GOT DISEASE', disease);\n\n        dispatch(actionCreaters.put(disease));\n\n        return disease;\n    };\n};\n\nexport const clear = () => {\n    return dispatch => dispatch(actionCreaters.clear());\n};\n","export const NEXT_STATES_PUT = 'nextStates/put';\nexport const NEXT_STATES_CLEAR = 'nextStates/clear';\n\nexport const put = states => ({\n    type: NEXT_STATES_PUT,\n    payload: states\n});\n\nexport const clear = () => ({\n    type: NEXT_STATES_CLEAR\n});\n\nexport default (state = [], action) => {\n    switch (action.type) {\n    case NEXT_STATES_PUT:\n        return action.payload;\n    case NEXT_STATES_CLEAR:\n        return [];\n    default:\n        return state;\n    }\n};\n","import * as actionCreaters from '../reducers/nextStates';\nimport * as service from '../../Services/draftService';\n\nexport const get = (patientId) => {\n    return async (dispatch) => {\n        const states = await service.getNextStates(patientId);\n        console.log('GET NEXT', states);\n        dispatch(actionCreaters.put(states));\n\n        return states;\n    };\n};\n\nexport const clear = () => {\n    return (dispatch) => dispatch(actionCreaters.clear());\n};\n","export const MEDICINES_PUT = 'medicines/put';\nexport const MEDICINES_CLEAR = 'medicines/clear';\n\nexport const put = medicines => ({\n    type: MEDICINES_PUT,\n    payload: medicines\n});\n\nexport const clear = () => ({\n    type: MEDICINES_CLEAR\n});\n\nexport default (state = [], action) => {\n    switch (action.type) {\n    case MEDICINES_PUT:\n        return action.payload;\n    case MEDICINES_CLEAR:\n        return [];\n    default:\n        return state;\n    }\n};\n","export const GRAPH_PUT = 'graph/put';\nexport const GRAPH_CLEAR = 'graph/clear';\n\nexport const put = graph => ({\n    type: GRAPH_PUT,\n    payload: graph\n});\n\nexport const clear = () => ({\n    type: GRAPH_CLEAR\n});\n\nconst defaultState = {\n  states: [],\n  transitions: []\n};\n\nexport default (state = defaultState, action) => {\n    switch (action.type) {\n    case GRAPH_PUT:\n        return action.payload;\n    case GRAPH_CLEAR:\n        return defaultState;\n    default:\n        return state;\n    }\n};\n","import React, { Component } from 'react';\nimport { ReactCytoscape, cytoscape } from 'react-cytoscape';\nimport { connect } from 'react-redux';\nimport { Icon, Modal } from 'semantic-ui-react';\nimport popper from 'cytoscape-popper';\n\ncytoscape.use(popper);\n\nexport class Graph extends Component {\n  cyRefs = {};\n  tooltip = null;\n  previousTappedNodes = {};\n\n  constructor (props) {\n      super(props);\n\n      this.tooltip = document.createElement('div');\n\n      this.tooltip.style = `z-index: 9999;border-radius: 5px; max-width: 200px; border: 1px solid #ccc; background: #fff; padding: 10px;`;\n  }\n\n  setCY = (refName) => (cy) => {\n      this.cyRefs[refName] = cy;\n\n      this.cyRefs[refName].on('tap', (evt) => {\n          if (evt.target !== this.cyRefs[refName]) {\n              return;\n          }\n          this.tooltip.remove();\n\n          if (this.previousTappedNodes[refName]) {\n              this.previousTappedNodes[refName].removeListener('position');\n              this.cyRefs[refName].removeListener('pan zoom resize');\n          }\n      });\n\n      this.cyRefs[refName].nodes().on('tap', (evt) => {\n          if (this.previousTappedNodes[refName]) {\n              this.previousTappedNodes[refName].removeListener('position');\n              this.cyRefs[refName].removeListener('pan zoom resize');\n          }\n\n          this.previousTappedNodes[refName] = evt.target;\n\n          const id = +evt.target.id();\n\n          const state = this.props.graph.states.find(state => state.id === id);\n\n          const popper = evt.target.popper({\n              content: () => {\n                  const name = document.createElement('h3');\n\n                  name.textContent = state.name;\n\n                  const description = document.createElement('p');\n\n                  description.textContent = state.description;\n\n                  Array.from(this.tooltip.children).forEach(child => child.remove());\n\n                  this.tooltip.appendChild(name);\n                  this.tooltip.appendChild(description);\n\n                  document.body.appendChild(this.tooltip);\n\n                  evt.target.on('position', () => {\n                      popper.scheduleUpdate();\n                  });\n\n                  this.cyRefs[refName].on('pan zoom resize', () => {\n                      popper.scheduleUpdate();\n                  });\n\n                  return this.tooltip;\n              }\n          });\n      });\n  };\n\n  render () {\n      const { status, graph } = this.props;\n\n      const nodes = graph.states.map(state => {\n          return {\n              data: { id: state.id, label: state.name },\n              selected: state.id === status.state.id,\n              grabbable: true\n          };\n      });\n      const edges = graph.transitions.map(transition => ({ data: { source: transition.from, target: transition.to } }));\n      const layout = { name: 'breadthfirst' };\n      const style = [\n          {\n              selector: 'node',\n              style: {\n                  'background-color': 'black',\n                  label: 'data(label)',\n                  'source-arrow-shape': 'triangle-backcurve'\n              }\n          },\n          {\n              selector: 'node:selected',\n              style: {\n                  'background-color': 'green'\n              }\n          },\n          {\n              selector: 'edge',\n              style: {\n                  width: 1,\n                  'curve-style': 'bezier',\n                  'line-color': '#ccc',\n                  'mid-target-arrow-color': '#ccc',\n                  'mid-target-arrow-shape': 'triangle-backcurve'\n              }\n          }\n      ];\n\n      const styleContainer = {\n          background: '#fff',\n          borderRadius: '5px'\n      };\n\n      return (\n          <div style={{ height: '100%', paddingTop: '15px' }}>\n              <Modal trigger={<Icon name='expand arrows alternate' style={{ position: 'absolute', zIndex: 1 }} />} size='fullscreen'>\n                  <Modal.Content>\n                      <ReactCytoscape\n                          elements={{ nodes, edges }}\n                          layout={layout}\n                          style={style}\n                          styleContainer={{\n                              height: '70vh',\n                              width: '100%',\n                              ...styleContainer\n                          }}\n                          cyRef={this.setCY('modal')}\n                      />\n                  </Modal.Content>\n              </Modal>\n              <ReactCytoscape\n                  elements={{ nodes, edges }}\n                  cyRef={this.setCY('block')}\n                  layout={layout}\n                  style={style}\n                  styleContainer={styleContainer}\n              />\n          </div>\n      );\n  }\n}\n\nexport default connect(\n    store => ({\n        graph: store.graph,\n        status: store.patient.status\n    })\n)(Graph);\n","import React from 'react';\nimport { Form, Button, Input } from 'semantic-ui-react';\nimport './NewStatusForm.css';\nimport AssociationForm from '../AssociationForm/AssociationForm';\n\nexport default class NewStatusForm extends React.Component {\n    state = {\n        healthMatter: '',\n        result: ''\n    };\n\n    componentDidMount () {\n        const { attribute } = this.props;\n        if (attribute) {\n            this.setState({\n                healthMatter: attribute.id,\n                result: attribute.value\n            });\n        } else {\n            this.setState({\n                healthMatter: '',\n                result: ''\n            });\n        }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const { onDraftUpdate } = this.props;\n        const { healthMatter, result } = this.state;\n\n        const name = this.props.diseaseData.find(data => data.id === healthMatter).name;\n\n        onDraftUpdate(\n            { id: healthMatter, value: result, name }\n        );\n    };\n\n    onHMChange = (e, { value }) => this.setState({ healthMatter: value });\n\n    onResultChange = (event) => this.setState({\n        result: event.target.value\n    });\n\n    getAssociationData = () => {\n        return {\n            predicate: `eq({status.${this.state.healthMatter}}, ${this.state.result})`,\n            type: 'symptom'\n        };\n    };\n\n    render () {\n        const { className, diseaseData } = this.props;\n        let { healthMatter, result } = this.state;\n        const options = diseaseData && diseaseData.map(attr => {\n            return {\n                key: attr.id,\n                text: attr.name,\n                value: attr.id\n            };\n        });\n\n        return (\n            <section className={`NewStatus ${className || ''}`}>\n\n                {options &&\n                    <Form className=\"NewStatus-Form\" onSubmit={this.handleSubmit}>\n                        <Form.Group inline>\n                            <Form.Field className='NewStatus-Field'>\n                                <Form.Select\n                                    label='Analysis or symptom'\n                                    options={options}\n                                    placeholder='data'\n                                    value={healthMatter}\n                                    onChange={this.onHMChange}\n                                    // disabled={disabled}\n                                />\n                            </Form.Field>\n                            <Form.Field className='NewStatus-Field'>\n                                <Form.Field\n                                    control={Input}\n                                    label='Result'\n                                    value={result}\n                                    onChange={this.onResultChange}\n                                />\n                            </Form.Field>\n                            <Button type='submit' basic color='green'>Submit</Button>\n                            {healthMatter && result &&\n                            <AssociationForm style={{ position: 'relative' }} getData={this.getAssociationData}/>}\n                        </Form.Group>\n                    </Form>}\n            </section>\n        );\n    }\n}\n","import { combineReducers } from 'redux';\nimport associations from './associations';\nimport draft from './draft';\nimport patient from './patient';\nimport patients from './patients';\nimport nextStates from './nextStates';\nimport disease from './disease';\nimport diseases from './diseases';\nimport history from './history';\nimport medicines from './medicines';\nimport graph from './graph';\n\nexport default combineReducers({\n    associations,\n    draft,\n    patient,\n    patients,\n    nextStates,\n    disease,\n    diseases,\n    history,\n    medicines,\n    graph\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport reducers from './reducers';\nimport reduxThunk from 'redux-thunk';\n\nexport default createStore(reducers, applyMiddleware(reduxThunk));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Divider, Icon, Select } from 'semantic-ui-react';\nimport NewStatusForm from '../NewStatusForm/NewStatusForm';\nimport AssociationForm from '../AssociationForm/AssociationForm';\nimport * as draftThunks from '../../redux/thunks/draft';\nimport * as nextStatesThunks from '../../redux/thunks/nextStates';\nimport * as diseaseThunks from '../../redux/thunks/disease';\nimport store from '../../redux';\nimport './StatusDraft.css';\n\nexport class StatusDraftContainer extends React.Component {\n    state = {\n        symptomsAmount: 1,\n        medicinesAmount: 1,\n        disableSubmit: false\n    };\n\n    componentDidMount () {\n        const { patient } = this.props;\n\n        this.props.updatePatientStatusData(patient.id);\n    }\n\n    componentWillReceiveProps (nextProps) {\n        const { draft } = nextProps;\n\n        this.setState({\n            symptomsAmount: 1,\n            medicinesAmount: draft.medicines && draft.medicines.length > 0 ? draft.medicines.length : 1\n        });\n    }\n\n  getAssociationData = () => {\n      return {\n          predicate: `eq({status.state.id}, ${this.props.draft.state.id})`,\n          type: 'state'\n      };\n  };\n\n    onPlusClick = (name) => () => {\n        switch (name) {\n        case 'attribute':\n            this.setState({\n                symptomsAmount: this.state.symptomsAmount + 1\n            });\n            break;\n\n        case 'medicine':\n            this.setState({\n                medicinesAmount: this.state.medicinesAmount + 1\n            });\n            break;\n        default:\n        }\n    };\n\n    onDraftSubmit = async () => {\n        this.setState({ disableSubmit: true });\n\n        const { id } = this.props.patient;\n        await this.onDraftUpdate();\n        alert('saved!');\n        await this.props.commitDraft(id);\n        await this.props.updatePatientStatusData(id);\n\n        this.setState({ disableSubmit: false });\n    };\n\n    onDraftUpdate = async (attribute, medicineId) => {\n        const { patient, draft } = this.props;\n        const status = patient.status;\n        const state = draft.state || status.state;\n        if (draft && draft.attributes && attribute) {\n            let updated = false;\n            draft.attributes.map((attr) => {\n                if (attr.id === attribute.id) {\n                    updated = true;\n                    attr.value = attribute.value;\n                }\n                return attr;\n            });\n            if (!updated) draft.attributes.push(attribute);\n        }\n\n        if (medicineId) {\n            draft.medicines = [\n                ...draft.medicines,\n                medicineId\n            ];\n        }\n\n        const data = {\n            attributes: (draft && draft.attributes) || [],\n            medicines: (draft && draft.medicines) || [],\n            stateId: (state && state.id) || draft.stateId\n        };\n\n        await this.props.createDraft(patient.id, data);\n        await this.props.getNextStates(patient.id);\n    };\n\n    render () {\n        const { patient, draft, disease, medicines } = this.props;\n        const status = (patient && patient.status) || {};\n        const currentState = draft.state || status.state;\n        let attributes = draft.attributes || [];\n        let currentMedicines = draft.medicines || [];\n\n        const { symptomsAmount, medicinesAmount } = this.state;\n        let diseaseData = disease.filter(diseaseItem => {\n            return !attributes.some(attribute => attribute.id === diseaseItem.id);\n        });\n        console.log('STORE', store.getState());\n\n        return (\n            <div className='States-Draft Draft'>\n                <AssociationForm getData={this.getAssociationData}/>\n                <h2 className='States-Heading'>Черновик состояния</h2>\n                <p>\n                    last updated: {status.submittedOn}\n                </p>\n                {currentState &&\n                 <div>\n                     <p>Текущее состояние</p>\n                     <p>state name: {currentState.name}</p>\n                     <p>\n                          description:{currentState.description}\n                     </p>\n                     {currentMedicines.length !== 0 && <h3>Лекарства</h3>}\n                     {currentMedicines && currentMedicines.map(medicineId =>\n                         <p key={medicineId}>\n                             {medicines.find(medicine => medicine.id === medicineId).name}\n                         </p>)\n                     }\n                 </div>\n                }\n                <Divider fitted/>\n                {attributes && attributes.map(attribute => (\n                    <NewStatusForm\n                        key={attribute.id}\n                        patientId={patient.id}\n                        statusId={status.id}\n                        onDraftUpdate={this.onDraftUpdate}\n                        diseaseData={[attribute]}\n                        attribute={attribute}\n                        // disabled\n                    />\n                ))}\n                {diseaseData && new Array(symptomsAmount).fill(true).map((el, index) =>\n                    <div className='Draft-StatusFormContainer' key={index}>\n                        {index === symptomsAmount - 1 &&\n                        <Icon\n                            name='plus circle'\n                            color='green'\n                            size='large'\n                            className='Draft-PlusButton'\n                            onClick={this.onPlusClick('attribute')}\n                        />\n                        }\n                        <NewStatusForm\n                            className={index < symptomsAmount - 1 ? 'Draft-StatusForm--Margined' : ''}\n                            patientId={patient.id}\n                            statusId={status.id}\n                            onDraftUpdate={this.onDraftUpdate}\n                            diseaseData={diseaseData}\n                        />\n                    </div>\n                )}\n                <Divider fitted/>\n                {medicines.length > 0 && new Array(medicinesAmount).fill(true).map((el, index) =>\n                    <div className='Draft-StatusFormContainer' key={index}>\n                        {index === medicinesAmount - 1 &&\n                        <Icon\n                            name='plus circle'\n                            color='green'\n                            size='large'\n                            className='Draft-PlusButton'\n                            onClick={this.onPlusClick('medicine')}\n                        />\n                        }\n                        <Select\n                            placeholder='Лекарство'\n                            options={medicines.map(medicine => ({\n                                value: medicine.id,\n                                key: medicine.id,\n                                text: medicine.name\n                            }))}\n                            value={currentMedicines[index] ? currentMedicines[index] : undefined}\n                            onChange={(e, option) => this.onDraftUpdate(undefined, option.value)}\n                        />\n                        {currentMedicines[index] && <AssociationForm\n                            style={{ position: 'relative' }}\n                            getData={() => ({ predicate: `eq({medicine.id}, ${currentMedicines[index]})`, type: 'medicine' })}\n                        />}\n                    </div>\n                )}\n                <br/>\n                <Button type=\"submit\" fluid positive onClick={this.onDraftSubmit} disabled={this.state.disableSubmit}>\n                    Сохранить черновик\n                </Button>\n            </div>\n        );\n    }\n}\n\nexport const StatusDraft = connect(\n    store => ({\n        draft: store.draft,\n        disease: store.disease,\n        patient: store.patient,\n        medicines: store.medicines\n    }),\n    {\n        getDraft: draftThunks.get,\n        clearDraft: draftThunks.clear,\n        commitDraft: draftThunks.commit,\n        createDraft: draftThunks.create,\n        getNextStates: nextStatesThunks.get,\n        getDisease: diseaseThunks.get\n    }\n)(StatusDraftContainer);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as draftThunks from '../../redux/thunks/draft';\nimport * as diseasesThunks from '../../redux/thunks/diseases';\nimport { NextState } from '../NextState/NextState';\nimport * as diseaseThunks from '../../redux/thunks/disease';\nimport * as nextStatesThunks from '../../redux/thunks/nextStates';\nimport * as medicinesThunks from '../../redux/thunks/medicines';\nimport * as patientThunks from '../../redux/thunks/patient';\nimport * as graphThunks from '../../redux/thunks/graph';\nimport Graph from '../Graph/Graph';\nimport { StatusDraft } from '../StatusDraft/StatusDraft';\nimport './States.css';\n\nexport class StatesContainer extends React.Component {\n    componentDidMount () {\n        this.props.getDiseases();\n    }\n\n    async componentWillReceiveProps (nextProps) {\n        const { patientId, status } = nextProps;\n\n        if (status && this.props.status && status.state.id === this.props.status.state.id) {\n            return;\n        }\n        await this.updatePatientStatusData(patientId);\n    }\n\n    updatePatientStatusData = async (patientId) => {\n        await this.props.getPatient(patientId);\n\n        try {\n            await this.props.getDraft(patientId);\n        } catch (e) {\n            const draftInitData = {\n                stateId: this.props.status.state.id,\n                medicines: [],\n                attributes: []\n            };\n            await this.props.createDraft(patientId, draftInitData);\n        }\n\n        await this.props.getDisease(patientId);\n        await this.props.getNextStates(patientId);\n\n        const diseaseId = this.props.diseases.find(disease => disease.name === this.props.diseaseName).id;\n\n        await this.props.getMedicines(diseaseId);\n        await this.props.getGraph(diseaseId);\n\n        console.log('DRAFT', this.props.draft);\n        console.log('GET diseaseData', this.props.disease);\n    };\n\n    confirmState = (state) => {\n        this.props.updateState(state);\n    };\n\n    associationData = () => {\n        return {\n            predicate: `eq({status.state.id}, ${this.props.status.state.id})`,\n            type: 'state'\n        };\n    };\n\n    render () {\n        const { status, nextStates } = this.props;\n\n        return (\n            <React.Fragment>\n                {status && (<section className=\"States\">\n                    <div className=\"States-DraftWrap States-Wrap\">\n                        <StatusDraft updatePatientStatusData={this.updatePatientStatusData}/>\n                        <Graph />\n                    </div>\n                    {nextStates.length ? <div className=\"States-NextWrap States-Wrap\">\n                        <div className=\"States-Next\">\n                            {nextStates.map(nextState =>\n                                <NextState key={nextState.state.id} confirmState={this.confirmState} {...nextState} />\n                            )}\n                        </div>\n                    </div> : null\n                    }\n                </section>)}\n            </React.Fragment>\n        );\n    }\n}\n\nexport const States = connect(\n    store => ({\n        nextStates: store.nextStates,\n        draft: store.draft,\n        patientId: store.patient.id,\n        diseaseName: store.patient.diseaseName,\n        status: store.patient.status,\n        diseases: store.diseases\n    }),\n    {\n        getDraft: draftThunks.get,\n        createDraft: draftThunks.create,\n        clearDraft: draftThunks.clear,\n        updateState: draftThunks.updateState,\n        getDiseases: diseasesThunks.get,\n        getDisease: diseaseThunks.get,\n        getNextStates: nextStatesThunks.get,\n        getPatient: patientThunks.get,\n        getMedicines: medicinesThunks.get,\n        getGraph: graphThunks.get\n    }\n)(StatesContainer);\n","import * as actionCreaters from '../reducers/diseases';\nimport * as service from '../../Services/draftService';\n\nexport const get = () => {\n    return async (dispatch) => {\n        const diseases = await service.getDiseases();\n\n        console.log('GOT DISEASES', diseases);\n\n        dispatch(actionCreaters.put(diseases));\n\n        return diseases;\n    };\n};\n\nexport const clear = () => {\n    return dispatch => dispatch(actionCreaters.clear());\n};\n","import * as actionCreaters from '../reducers/medicines';\nimport * as service from '../../Services/draftService';\n\nexport const get = (diseaseId) => {\n    return async (dispatch) => {\n        const medicines = await service.getMedicines(diseaseId);\n\n        console.log('GOT MEDICINES', medicines);\n\n        dispatch(actionCreaters.put(medicines));\n\n        return medicines;\n    };\n};\n\nexport const clear = () => {\n    return dispatch => dispatch(actionCreaters.clear());\n};\n","import * as actionCreaters from '../reducers/graph';\nimport * as service from '../../Services/draftService';\n\nexport const get = (diseaseId) => {\n    return async (dispatch) => {\n        const graph = await service.getGraph(diseaseId);\n\n        dispatch(actionCreaters.put(graph));\n\n        return graph;\n    };\n};\n\nexport const clear = () => {\n    return dispatch => dispatch(actionCreaters.clear());\n};\n","import { PatientsList } from './components/PatientsList/PatientsList';\nimport { PatientInfo } from './components/PatientInfo/PatientInfo';\nimport { Patient } from './components/Patient/Patient';\nimport { Associations } from './components/Associations/Associations';\nimport { CurrentState } from './components/CurrentState/CurrentState';\nimport { States } from './components/States/States';\n\nexport const headerRoutes = [\n    {\n        name: 'Пациенты',\n        path: '/patients',\n        component: PatientsList\n    },\n    {\n        path: '/patient/:patientId',\n        component: Patient\n    }\n];\n\nexport const sidebarRoutes = [\n    {\n        name: 'Черновик состояния',\n        path: 'draft',\n        component: States\n    },\n    {\n        name: 'Текущее состояние',\n        path: 'current',\n        component: CurrentState\n    },\n    {\n        name: 'История',\n        path: 'history',\n        component: PatientInfo\n    },\n    {\n        name: 'Информация',\n        path: 'info',\n        component: PatientInfo\n    },\n    {\n        name: 'Ассоциации',\n        path: 'associations',\n        component: Associations\n    }\n];\n\nexport const routes = sidebarRoutes.map(route => ({\n    ...route,\n    path: `/patient/:patientId/${route.path}`\n}));\n","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport { headerRoutes } from '../../constants';\nimport { Link } from 'react-router-dom';\n\nexport const Header = () => {\n    return (\n        <Menu attached=\"top\">\n            {headerRoutes.filter(route => route.name).map(route => (\n                <Link to={route.path} key={route.name}>\n                    <Menu.Item as={'li'}\n                        name={route.name}\n                    />\n                </Link>\n            ))}\n        </Menu>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n","import React from 'react';\nimport { PatientsList } from './components/PatientsList/PatientsList';\nimport { Route, Switch } from 'react-router-dom';\nimport { Header } from './components/Header/Header';\nimport { headerRoutes } from './constants';\nimport './App.css';\n\nexport const App = () => (\n    <div className=\"App\">\n        <Header/>\n        <main className={'Main'}>\n            <Switch>\n                <Route exact path='/' component={PatientsList}/>\n                {headerRoutes.map(route =>\n                    <Route path={route.path} component={route.component} key={route.path}/>)}\n            </Switch>\n        </main>\n    </div>\n\n);\n"],"sourceRoot":""}